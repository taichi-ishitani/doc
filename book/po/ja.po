msgid ""
msgstr ""
"Project-Id-Version: The Veryl Hardware Description Language\n"
"POT-Creation-Date: 2024-04-01T16:00:16+09:00\n"
"PO-Revision-Date: 2023-12-28 23:02+0900\n"
"Last-Translator: Naoya Hatta <dalance@gmail.com>\n"
"Language-Team: Japanese\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: src/SUMMARY.md:1
msgid "Summary"
msgstr "Summary"

#: src/SUMMARY.md:3
msgid "Introduction"
msgstr "概要"

#: src/SUMMARY.md:4 src/02_features.md:1
msgid "Features"
msgstr "特徴"

#: src/SUMMARY.md:5 src/03_getting_started.md:1
msgid "Getting Started"
msgstr "はじめに"

#: src/SUMMARY.md:6 src/03_getting_started/01_installation.md:1
msgid "Installation"
msgstr "インストール"

#: src/SUMMARY.md:7 src/03_getting_started/02_hello_world.md:1
msgid "Hello, World!"
msgstr "Hello, World!"

#: src/SUMMARY.md:8 src/04_code_examples.md:1
msgid "Code Examples"
msgstr "コード例"

#: src/SUMMARY.md:9 src/SUMMARY.md:52 src/04_code_examples/01_module.md:1
#: src/05_language_reference/07_module.md:1
msgid "Module"
msgstr "モジュール"

#: src/SUMMARY.md:10 src/SUMMARY.md:50
#: src/04_code_examples/02_instantiation.md:1
#: src/05_language_reference/06_declaration/10_instantiation.md:1
msgid "Instantiation"
msgstr "インスタンス"

#: src/SUMMARY.md:11 src/SUMMARY.md:53 src/04_code_examples/03_interface.md:1
#: src/05_language_reference/08_interface.md:1
msgid "Interface"
msgstr "インターフェース"

#: src/SUMMARY.md:12 src/SUMMARY.md:54 src/04_code_examples/04_package.md:1
#: src/05_language_reference/09_package.md:1
msgid "Package"
msgstr "パッケージ"

#: src/SUMMARY.md:13 src/05_language_reference.md:1
msgid "Language Reference"
msgstr "言語リファレンス"

#: src/SUMMARY.md:14 src/05_language_reference/01_source_code_structure.md:1
msgid "Source Code Structure"
msgstr "ソースコードの構造"

#: src/SUMMARY.md:15 src/05_language_reference/02_lexical_structure.md:1
msgid "Lexical Structure"
msgstr "字句構造"

#: src/SUMMARY.md:16
#: src/05_language_reference/02_lexical_structure/01_operator.md:1
#: src/05_language_reference/04_expression/01_operator_precedence.md:5
msgid "Operator"
msgstr "演算子"

#: src/SUMMARY.md:17
#: src/05_language_reference/02_lexical_structure/02_number.md:1
msgid "Number"
msgstr "数値"

#: src/SUMMARY.md:18 src/05_language_reference/03_data_type.md:1
msgid "Data Type"
msgstr "データ型"

#: src/SUMMARY.md:19
#: src/05_language_reference/03_data_type/01_builtin_type.md:1
msgid "Builtin Type"
msgstr "組み込み型"

#: src/SUMMARY.md:20
#: src/05_language_reference/03_data_type/02_user_defined_type.md:1
msgid "User Defined Type"
msgstr "ユーザ定義型"

#: src/SUMMARY.md:21 src/05_language_reference/03_data_type/03_array.md:1
msgid "Array"
msgstr "配列"

#: src/SUMMARY.md:22 src/05_language_reference/04_expression.md:1
msgid "Expression"
msgstr "式"

#: src/SUMMARY.md:23
#: src/05_language_reference/04_expression/01_operator_precedence.md:1
msgid "Operator Precedence"
msgstr "演算子の優先順位"

#: src/SUMMARY.md:24 src/SUMMARY.md:34
#: src/05_language_reference/04_expression/02_function_call.md:1
#: src/05_language_reference/05_statement/02_function_call.md:1
msgid "Function Call"
msgstr "関数呼び出し"

#: src/SUMMARY.md:25
#: src/05_language_reference/04_expression/03_concatenation.md:1
msgid "Concatenation"
msgstr "連結"

#: src/SUMMARY.md:26 src/SUMMARY.md:35
#: src/05_language_reference/04_expression/04_if.md:1
#: src/05_language_reference/05_statement/03_if.md:1
msgid "If"
msgstr "if"

#: src/SUMMARY.md:27 src/SUMMARY.md:36
#: src/05_language_reference/04_expression/05_case.md:1
#: src/05_language_reference/05_statement/04_case.md:1
msgid "Case"
msgstr "case"

#: src/SUMMARY.md:28 src/05_language_reference/04_expression/06_bit_select.md:1
msgid "Bit Select"
msgstr "ビット選択"

#: src/SUMMARY.md:29 src/05_language_reference/04_expression/07_range.md:1
msgid "Range"
msgstr "範囲"

#: src/SUMMARY.md:30 src/05_language_reference/04_expression/08_msb_lsb.md:1
msgid "Msb / Lsb"
msgstr "msb / lsb"

#: src/SUMMARY.md:31
#: src/05_language_reference/04_expression/09_inside_outside.md:1
msgid "Inside / Outside"
msgstr "inside / outside"

#: src/SUMMARY.md:32 src/05_language_reference/05_statement.md:1
msgid "Statement"
msgstr "文"

#: src/SUMMARY.md:33 src/05_language_reference/05_statement/01_assignment.md:1
msgid "Assignment"
msgstr "代入"

#: src/SUMMARY.md:37 src/05_language_reference/05_statement/05_for.md:1
msgid "For"
msgstr "for"

#: src/SUMMARY.md:38 src/05_language_reference/05_statement/06_return.md:1
msgid "Return"
msgstr "return"

#: src/SUMMARY.md:39 src/05_language_reference/05_statement/07_let.md:1
msgid "Let"
msgstr "let"

#: src/SUMMARY.md:40 src/05_language_reference/06_declaration.md:1
msgid "Declaration"
msgstr "宣言"

#: src/SUMMARY.md:41 src/05_language_reference/06_declaration/01_variable.md:1
msgid "Variable"
msgstr "変数"

#: src/SUMMARY.md:42 src/05_language_reference/06_declaration/02_parameter.md:1
msgid "Parameter"
msgstr "パラメータ"

#: src/SUMMARY.md:43 src/05_language_reference/06_declaration/03_register.md:1
msgid "Register"
msgstr "レジスタ"

#: src/SUMMARY.md:44
#: src/05_language_reference/06_declaration/04_combinational.md:1
msgid "Combinational"
msgstr "組み合わせ回路"

#: src/SUMMARY.md:45 src/05_language_reference/06_declaration/05_assign.md:1
msgid "Assign"
msgstr "assign"

#: src/SUMMARY.md:46 src/05_language_reference/06_declaration/06_function.md:1
msgid "Function"
msgstr "関数"

#: src/SUMMARY.md:47
#: src/05_language_reference/06_declaration/07_initial_final.md:1
msgid "Initial / Final"
msgstr "initial / final"

#: src/SUMMARY.md:48 src/05_language_reference/06_declaration/08_attribute.md:1
msgid "Attribute"
msgstr "アトリビュート"

#: src/SUMMARY.md:49 src/05_language_reference/06_declaration/09_generate.md:1
msgid "Generate"
msgstr "生成"

#: src/SUMMARY.md:51
#: src/05_language_reference/06_declaration/11_named_block.md:1
msgid "Named Block"
msgstr "名前付きブロック"

#: src/SUMMARY.md:55
#: src/05_language_reference/10_systemverilog_interoperation.md:1
msgid "SystemVerilog Interoperation"
msgstr "SystemVerilogとの相互運用"

#: src/SUMMARY.md:56 src/05_language_reference/11_visibility.md:1
msgid "Visibility"
msgstr "可視性"

#: src/SUMMARY.md:57 src/06_development_environment.md:1
msgid "Development Environment"
msgstr "開発環境"

#: src/SUMMARY.md:58
#: src/06_development_environment/01_project_configuration.md:1
msgid "Project Configuration"
msgstr "プロジェクト設定"

#: src/SUMMARY.md:59 src/06_development_environment/02_dependencies.md:1
msgid "Dependencies"
msgstr "依存関係"

#: src/SUMMARY.md:60 src/06_development_environment/03_publish_project.md:1
msgid "Publish Project"
msgstr "プロジェクトを公開する"

#: src/SUMMARY.md:61 src/06_development_environment/04_directory_layout.md:1
msgid "Directory Layout"
msgstr "ディレクトリ構成"

#: src/SUMMARY.md:62 src/06_development_environment/05_formatter.md:1
msgid "Formatter"
msgstr "フォーマッタ"

#: src/SUMMARY.md:63 src/06_development_environment/06_linter.md:1
msgid "Linter"
msgstr "リンタ"

#: src/SUMMARY.md:64 src/06_development_environment/07_language_server.md:1
msgid "Language Server"
msgstr "言語サーバ"

#: src/SUMMARY.md:65 src/06_development_environment/08_compatibility.md:1
msgid "Compatibility"
msgstr "互換性"

#: src/SUMMARY.md:66 src/06_development_environment/09_documentation.md:1
msgid "Documentation"
msgstr "ドキュメンテーション"

#: src/SUMMARY.md:67 src/06_development_environment/10_github_action.md:1
msgid "GitHub Action"
msgstr "GitHub Action"

#: src/SUMMARY.md:68 src/07_appendix.md:1
msgid "Appendix"
msgstr "補遺"

#: src/SUMMARY.md:69 src/07_appendix/01_formal_syntax.md:1
msgid "Formal Syntax"
msgstr "構文"

#: src/SUMMARY.md:70 src/07_appendix/02_semantic_error.md:1
msgid "Semantic Error"
msgstr "セマンティックエラー"

#: src/01_introduction.md:1
msgid "The Veryl Hardware Description Language"
msgstr "ハードウェア記述言語 Veryl"

#: src/01_introduction.md:3
msgid ""
"![Veryl](https://github.com/veryl-lang/veryl/raw/master/support/logo/"
"veryl_wide.png)"
msgstr ""
"![Veryl](https://github.com/veryl-lang/veryl/raw/master/support/logo/"
"veryl_wide.png)"

#: src/01_introduction.md:5
msgid ""
"Veryl is a hardware description language based on SystemVerilog, providing "
"the following advantages:"
msgstr ""
"Veryl は SystemVerilog をベースに設計されたハードウェア記述言語であり、以下の"
"ような特徴があります。"

#: src/01_introduction.md:7
msgid "Optimized Syntax"
msgstr "最適化された構文"

#: src/01_introduction.md:8
msgid ""
"Veryl adopts syntax optimized for logic design while being based on a "
"familiar basic syntax for SystemVerilog experts. This optimization includes "
"guarantees for synthesizability, ensuring consistency between simulation "
"results, and providing numerous syntax simplifications for common idioms. "
"This approach enables ease of learning, improves the reliability and "
"efficiency of the design process, and facilitates ease of code writing."
msgstr ""
"Verylは、SystemVerilogの経験者にとって親しみやすい基本構文に基づきながら、論"
"理設計に最適化された構文を採用しています。この最適化には、たとえば合成可能性"
"の保証やシミュレーション結果の一致の保証、頻出する定型文を簡素化する多数の構"
"文などの提供が含まれます。このアプローチにより、学習の容易さ、設計プロセスの"
"信頼性と効率の向上、およびコードの記述の容易さが実現されます。"

#: src/01_introduction.md:12
msgid "Interoperability"
msgstr "相互運用性"

#: src/01_introduction.md:13
msgid ""
"Designed with interoperability with SystemVerilog in mind, Veryl allows "
"smooth integration and partial replacement with existing SystemVerilog "
"components and projects. Furthermore, SystemVerilog source code transpiled "
"from Veryl retains high readability, enabling seamless integration and "
"debugging."
msgstr ""
"VerylはSystemVerilogとの相互運用性を考慮して設計されており、既存の"
"SystemVerilogコンポーネントやプロジェクトとの組み合わせや部分的な置き換えをス"
"ムーズに行うことができます。さらに、Verylからトランスパイルされた"
"SystemVerilogソースコードは、その高い可読性により、シームレスな統合やデバッグ"
"を可能にします。"

#: src/01_introduction.md:16
msgid "Productivity"
msgstr "生産性"

#: src/01_introduction.md:17
msgid ""
"Veryl comes with a rich set of development support tools, including package "
"managers, build tools, real-time checkers compatible with major editors such "
"as VSCode, Vim, Emacs, automatic completion, and automatic formatting. These "
"tools accelerate the development process and significantly enhance "
"productivity."
msgstr ""
"Verylはパッケージマネージャ、ビルドツール、そしてVSCode、Vim、Emacsなどの主要"
"なエディタに対応するリアルタイムチェッカー、自動補完機能、自動フォーマッタな"
"ど、豊富な開発支援ツールを備えています。これらのツールは、開発プロセスを加速"
"し、生産性を大幅に向上させることができます。"

#: src/01_introduction.md:20
msgid ""
"With these features, Veryl provides powerful support for designers to "
"efficiently and productively conduct high-quality hardware design."
msgstr ""
"これらの特性により、Verylは設計者が高品質なハードウェア設計をより効率的かつ生"
"産的に行うための強力なサポートを提供します。"

#: src/02_features.md:3
msgid ""
"In this chapter, we introduce the features of Veryl along with clear "
"examples."
msgstr "この章ではVerylの特徴的な機能をわかりやすい例とともに紹介します。"

#: src/02_features.md:5
msgid "[Real-time diagnostics](02_features.md#real-time-diagnostics)"
msgstr "[リアルタイム診断](02_features.md#real-time-diagnostics)"

#: src/02_features.md:6
msgid "[Auto formatting](02_features.md#auto-formatting)"
msgstr "[自動フォーマット](02_features.md#auto-formatting)"

#: src/02_features.md:7
msgid "[Dependency management](02_features.md#dependency-management)"
msgstr "[依存関係管理](02_features.md#dependency-management)"

#: src/02_features.md:8
msgid "[Trailing comma](02_features.md#trailing-comma)"
msgstr "[末尾カンマ](02_features.md#trailing-comma)"

#: src/02_features.md:9
msgid ""
"[Abstraction of clock and reset](02_features.md#abstraction-of-clock-and-"
"reset)"
msgstr ""
"[クロックとリセットの抽象化](02_features.md#abstraction-of-clock-and-reset)"

#: src/02_features.md:10
msgid "[Documentation comment](02_features.md#documentation-comment)"
msgstr "[ドキュメンテーションコメント](02_features.md#documentation-comment)"

#: src/02_features.md:11
msgid ""
"[Compound assignment operator in `always_ff`](02_features.md#compound-"
"assignment-operator-in-always_ff)"
msgstr ""
"[`always_ff` での複合代入演算子](02_features.md#compound-assignment-operator-"
"in-always_ff)"

#: src/02_features.md:12
msgid ""
"[Individual namespace of enum variant](02_features.md#individual-namespace-"
"of-enum-variant)"
msgstr ""
"[独立した名前空間を持つenumバリアント](02_features.md#individual-namespace-"
"of-enum-variant)"

#: src/02_features.md:13
msgid "[`repeat` of concatenation](02_features.md#repeat-of-concatenation)"
msgstr "[ビット連結における `repeat`](02_features.md#repeat-of-concatenation)"

#: src/02_features.md:14
msgid "[`if` / `case` expression](02_features.md#if--case-expression)"
msgstr "[`if` / `case` 式](02_features.md#if--case-expression)"

#: src/02_features.md:15
msgid ""
"[Range-based `for` / `inside` / `outside`](02_features.md#range-based-for--"
"inside--outside)"
msgstr ""
"[範囲 `for` / `inside` / `outside`](02_features.md#range-based-for--inside--"
"outside)"

#: src/02_features.md:16
msgid "[`msb` notation](02_features.md#msb-notation)"
msgstr "[`msb` 記法](02_features.md#msb-notation)"

#: src/02_features.md:17
msgid "[`let` statement](02_features.md#let-statement)"
msgstr "[`let` 文](02_features.md#let-statement)"

#: src/02_features.md:18
msgid "[Named block](02_features.md#named-block)"
msgstr "[名前付きブロック](02_features.md#named-block)"

#: src/02_features.md:19
msgid "[Visibility control](02_features.md#visibility-control)"
msgstr "[可視性制御](02_features.md#visibility-control)"

#: src/02_features.md:21
msgid "Real-time diagnostics"
msgstr "リアルタイム診断"

#: src/02_features.md:23
msgid ""
"Issues such as undefined, unused, or unassigned variables are notified in "
"real-time while editing in the editor. In the following example, adding the "
"`_` prefix to variables flagged as unused explicitly indicates their unused "
"status, suppressing warnings."
msgstr ""
"変数の未定義・未使用・未代入といった問題はエディタでの編集中にリアルタイムに"
"通知されます。次の例では、未使用変数として通知された変数に `_` プレフィックス"
"を付加することで未使用であることを明示し、警告を抑制しています。"

#: src/02_features.md:26
msgid "![diagnostics](./img/diagnostics.gif)"
msgstr "![diagnostics](./img/diagnostics.gif)"

#: src/02_features.md:28 src/02_features.md:37
msgid "If the video does not play[^1]"
msgstr "ビデオが再生されない場合[^1]"

#: src/02_features.md:30
msgid "Auto formatting"
msgstr "自動フォーマット"

#: src/02_features.md:32
msgid ""
"In addition to the automatic formatting feature integrated with the editor, "
"formatting through the command line and formatting checks in CI are also "
"possible."
msgstr ""
"エディタと連携した自動フォーマット機能のほか、コマンドラインでのフォーマット"
"やCIでのフォーマットチェックも可能です。"

#: src/02_features.md:35
msgid "![format](./img/format.gif)"
msgstr "![format](./img/format.gif)"

#: src/02_features.md:39
msgid "Dependency management"
msgstr "依存関係管理"

#: src/02_features.md:41
msgid ""
"Veryl includes a built-in dependency management feature, allowing for easy "
"incorporation of libraries by simply adding the repository path and version "
"of the library on project settings like below."
msgstr ""
"Verylには依存関係の管理機能が組み込まれており、プロジェクト設定に以下のように"
"ライブラリのリポジトリパスとバージョンを追加するだけで、簡単にライブラリを組"
"み込むことができます。"

#: src/02_features.md:44 src/06_development_environment/02_dependencies.md:6
msgid ""
"```toml\n"
"[dependencies]\n"
"\"https://github.com/veryl-lang/sample\" = \"0.1.0\"\n"
"```"
msgstr ""
"```toml\n"
"[dependencies]\n"
"\"https://github.com/veryl-lang/sample\" = \"0.1.0\"\n"
"```"

#: src/02_features.md:49
msgid "Trailing comma"
msgstr "末尾カンマ"

#: src/02_features.md:51
msgid ""
"Trailing comma is a syntax where a comma is placed after the last element in "
"a list. It facilitates the addition and removal of elements and reduces "
"unnecessary differences in version control systems."
msgstr ""
"末尾カンマは、リストの最後の要素の後ろにカンマが置かれる構文です。これによ"
"り、要素の追加や削除が容易になり、バージョン管理システムにおける不必要な差異"
"を減らすことができます。"

#: src/02_features.md:87
msgid "Abstraction of clock and reset"
msgstr "クロックとリセットの抽象化"

#: src/02_features.md:89
msgid ""
"There is no need to specify the polarity and synchronicity of the clock and "
"reset in the syntax; these can be specified during build-time configuration. "
"This allows generating code for both ASICs with negative asynchronous reset "
"and FPGAs with positive synchronous reset from the same Veryl code."
msgstr ""
"クロックの極性やリセットの極性と同期性を構文上指定する必要はなく、ビルド時の"
"設定で指定することができます。これにより同じVerylのコードからASIC向けの負極"
"性・非同期リセットとFPGA向けの正極性・同期リセットのそれぞれのコードを生成す"
"ることができます。"

#: src/02_features.md:125 src/05_language_reference/02_lexical_structure.md:32
msgid "Documentation comment"
msgstr "ドキュメンテーションコメント"

#: src/02_features.md:127
msgid ""
"Writing module descriptions as documentation comments allows for automatic "
"documentation generation. You can use not only plain text but also MarkDown "
"format or waveform descriptions using [WaveDrom](https://wavedrom.com)."
msgstr ""
"ドキュメンテーションコメントとしてモジュールの説明を書いておくとドキュメント"
"を自動生成することができます。単なるテキストだけでなく、マークダウン形式や"
"[WaveDrom](https://wavedrom.com)による波形記述を使用することができます。"

#: src/02_features.md:138
msgid ""
"```verilog\n"
"// Comment\n"
"module ModuleA;\n"
"endmodule\n"
"```"
msgstr ""
"```verilog\n"
"// コメント\n"
"module ModuleA;\n"
"endmodule\n"
"```"

#: src/02_features.md:147
msgid ""
"````veryl\n"
"/// Documentation comment written by Markdown\n"
"///\n"
"/// * list\n"
"/// * list\n"
"/// \n"
"/// ```wavedrom\n"
"/// { signal: [{ name: \"Alfa\", wave: \"01.zx=ud.23.456789\" }] }\n"
"/// ```\n"
"module ModuleA {\n"
"}\n"
"````"
msgstr ""
"````veryl\n"
"/// マークダウン形式のドキュメンテーションコメント\n"
"///\n"
"/// * リスト\n"
"/// * リスト\n"
"/// \n"
"/// ```wavedrom\n"
"/// { signal: [{ name: \"Alfa\", wave: \"01.zx=ud.23.456789\" }] }\n"
"/// ```\n"
"module ModuleA {\n"
"}\n"
"````"

#: src/02_features.md:164
msgid "Compound assignment operator in `always_ff`"
msgstr "`always_ff` での複合代入演算子"

#: src/02_features.md:166
msgid ""
"There is no dedicated non-blocking assignment operator; within `always_ff`, "
"non-blocking assignments are inferred, while within `always_comb`, blocking "
"assignments are inferred. Therefore, various compound assignment operators "
"can be used within `always_ff` just like within `always_comb`."
msgstr ""
"ノンブロッキング専用の代入演算子はなく、`always_ff` 内ではノンブロッキング代"
"入が、 `always_comb` 内ではブロッキング代入が推論されます。そのため "
"`always_ff` 内でも `always_comb` 内と同様に様々な複合代入演算子を使用すること"
"ができます。"

#: src/02_features.md:201
msgid "Individual namespace of enum variant"
msgstr "独立した名前空間を持つenumバリアント"

#: src/02_features.md:203
msgid ""
"Variants of an enum are defined within separate namespaces for each enum, "
"thus preventing unintended name collisions."
msgstr ""
"enumのバリアントはenum毎に独立した名前空間を持っており意図しない名前の衝突を"
"防ぐことができます。"

#: src/02_features.md:241
msgid "`repeat` of concatenation"
msgstr "ビット連結における `repeat`"

#: src/02_features.md:243
msgid ""
"By adopting the explicit `repeat` syntax as a repetition description in bit "
"concatenation, readability improves over complex combinations of `{}`."
msgstr ""
"ビット連結における繰り返し記述として明示的な `repeat` 記法を採用し、 複雑な "
"`{}` の組み合わせより可読性が向上しています。"

#: src/02_features.md:271
msgid "`if` / `case` expression"
msgstr "`if` / `case` 式"

#: src/02_features.md:273
msgid ""
"By adopting `if` and `case` expressions instead of the ternary operator, "
"readability improves, especially when comparing a large number of items."
msgstr ""
"三項演算子の代わりに if 式と case 式を採用することで、比較するアイテム数が多"
"い場合の可読性が向上します。"

#: src/02_features.md:309
msgid "Range-based `for` / `inside` / `outside`"
msgstr "範囲 `for` / `inside` / `outside`"

#: src/02_features.md:311
msgid ""
"With notation representing closed intervals `..=` and half-open intervals `.."
"`, it is possible to uniformly describe ranges using `for`, `inside`, and "
"`outside` (which denotes the inverse of `inside`)."
msgstr ""
"閉区間 `..=` と半開区間 `..` を表す記法を導入し、 `for` 、`inside` で範囲を統"
"一的に記述できるようにしました。また、`inside` の逆を意味する `outside` も導"
"入しました。"

#: src/02_features.md:343
msgid "`msb` notation"
msgstr "`msb` 記法"

#: src/02_features.md:345
msgid ""
"The `msb` notation, indicating the most significant bit, eliminates the need "
"to calculate the most significant bit from parameters, making intentions "
"clearer."
msgstr ""
"最上位ビットを示す `msb` 記法により、パラメータから最上位ビットを計算する必要"
"がなくなり、より意図を明確にすることができます。"

#: src/02_features.md:374
msgid "`let` statement"
msgstr "`let` 文"

#: src/02_features.md:376
msgid ""
"There is a dedicated `let` statement available for binding values "
"simultaneously with variable declaration, which can be used in various "
"contexts that were not supported in SystemVerilog."
msgstr ""
"変数宣言と同時に値を束縛する専用の `let` 文が用意されており、SystemVerilogで"
"はサポートされていなかった様々な場所で使用することができます。"

#: src/02_features.md:409
msgid "Named block"
msgstr "名前付きブロック"

#: src/02_features.md:411
msgid "You can define named blocks to limit the scope of variables."
msgstr ""
"変数のスコープを限定するための名前付きブロックを定義することができます。"

#: src/02_features.md:438
msgid "Visibility control"
msgstr "可視性制御"

#: src/02_features.md:440
msgid ""
"Modules without the `pub` keyword cannot be referenced from outside the "
"project and are not included in automatic documentation generation. This "
"allows distinguishing between what should be exposed externally from the "
"project and internal implementations."
msgstr ""
"`pub` キーワードの付かないモジュールはプロジェクト外から参照できず、ドキュメ"
"ントの自動生成にも含まれません。これによりプロジェクト外に公開したいものと内"
"部実装とを区別することができます。"

#: src/02_features.md:475
msgid ""
"Some browsers by default pause the playback of GIF animations. Please check "
"your browser settings."
msgstr ""
"いくつかのブラウザはデフォルトでGIF動画の再生を停止しています。ブラウザの設定"
"を確認してください。"

#: src/03_getting_started.md:3
msgid ""
"Let's start to use Veryl. In this section, we will install Veryl, create an "
"example project, and build it."
msgstr ""
"Veryl を使ってみましょう。この章では Veryl のインストール、サンプルプロジェク"
"トの作成とビルドまでを行います。"

#: src/03_getting_started/01_installation.md:3
msgid ""
"You can install Veryl by downloading binary. If you have Rust development "
"environment, you can use `cargo` instead of it."
msgstr ""
"Veryl バイナリをダウンロードしてインストールできます。もし Rust ユーザであれ"
"ば `cargo` コマンドでインストールすることもできます。"

#: src/03_getting_started/01_installation.md:6
msgid "Requirement"
msgstr "要件"

#: src/03_getting_started/01_installation.md:8
msgid ""
"Veryl uses `git` command internally. Please confirm `git` can be launched."
msgstr ""
"Veryl は `git` コマンドを内部で使用します。 `git` が起動できることを確認して"
"おいてください。"

#: src/03_getting_started/01_installation.md:10
msgid "Choose a way of installation"
msgstr "インストール方法の選択"

#: src/03_getting_started/01_installation.md:12
msgid "Download binary"
msgstr "バイナリのダウンロード"

#: src/03_getting_started/01_installation.md:14
msgid ""
"Download from [release page](https://github.com/veryl-lang/veryl/releases/"
"latest), and extract to the directory in PATH."
msgstr ""
"[リリースページ](https://github.com/veryl-lang/veryl/releases/latest)からダウ"
"ンロードして、パスの通ったところに展開してください。"

#: src/03_getting_started/01_installation.md:16
msgid "Cargo"
msgstr "Cargo"

#: src/03_getting_started/01_installation.md:18
msgid "You can install with [cargo](https://crates.io/crates/veryl)."
msgstr ""
"[cargo](https://crates.io/crates/veryl) コマンドからインストールすることもで"
"きます。"

#: src/03_getting_started/01_installation.md:24
msgid "Editor integration"
msgstr "エディタ設定"

#: src/03_getting_started/01_installation.md:26
msgid ""
"[Visual Studio Code](https://azure.microsoft.com/ja-jp/products/visual-"
"studio-code) and [Vim](https://github.com/vim/vim) / [Neovim](https://neovim."
"io) are supported officially."
msgstr ""
"公式には [Visual Studio Code](https://azure.microsoft.com/ja-jp/products/"
"visual-studio-code) と [Vim](https://github.com/vim/vim) / [Neovim](https://"
"neovim.io) がサポートされています。"

#: src/03_getting_started/01_installation.md:28
msgid "Visual Studio Code"
msgstr "Visual Studio Code"

#: src/03_getting_started/01_installation.md:30
msgid ""
"For Visual Studio Code, Veryl extension is provided. The extension provides "
"file type detection, syntex highlight and language server integration. You "
"can install it by searching \"Veryl\" in extension panel or the following "
"URL."
msgstr ""
"Visual Studio Code 向けに Veryl 拡張が提供されています。拡張はファイルタイプ"
"の検出とシンタックスハイライト、言語サーバの組み込みを提供します。拡張パネル"
"から \"Veryl\" で検索するか、以下の URL からインストールしてください。"

#: src/03_getting_started/01_installation.md:34
msgid ""
"[Veryl extension for Visual Studio Code](https://marketplace.visualstudio."
"com/items?itemName=dalance.vscode-veryl)"
msgstr ""
"[Veryl extension for Visual Studio Code](https://marketplace.visualstudio."
"com/items?itemName=dalance.vscode-veryl)"

#: src/03_getting_started/01_installation.md:36
msgid "Vim / Neovim"
msgstr "Vim / Neovim"

#: src/03_getting_started/01_installation.md:38
msgid ""
"For Vim / Neovim, Veryl plugin is provided. The plugin provides file type "
"detection, syntex highlight. There are some instructions for plugin "
"installation and language server integration in the following URL."
msgstr ""
"Vim / Neovim 向けに Veryl プラグインが提供されています。プラグインはファイル"
"タイプの検出とシンタックスハイライトを提供します。プラグインのインストールと"
"言語サーバの組み込みは以下の URL を参照してください。"

#: src/03_getting_started/01_installation.md:42
msgid "[Vim / Neovim plugin](https://github.com/veryl-lang/veryl.vim)"
msgstr "[Vim / Neovim plugin](https://github.com/veryl-lang/veryl.vim)"

#: src/03_getting_started/01_installation.md:44
msgid "Other Editors"
msgstr "そのほかのエディタ"

#: src/03_getting_started/01_installation.md:46
msgid ""
"Veryl provides language server. So other editors supporting language server "
"(ex. Emacs) can use it."
msgstr ""
"Veryl は言語サーバを提供しているので、言語サーバをサポートしているエディタ"
"（例えば Emacs）であれば利用できます。"

#: src/03_getting_started/02_hello_world.md:3
msgid "Create Project"
msgstr "プロジェクトを作る"

#: src/03_getting_started/02_hello_world.md:5
msgid "At first, a new Veryl project can be created by:"
msgstr "まず始めに、新しい Veryl プロジェクトを作りましょう。"

#: src/03_getting_started/02_hello_world.md:11
msgid "After the command, the following directory and file will be created."
msgstr ""
"コマンドを実行すると、以下のようなディレクトリとファイルが作成されます。"

#: src/03_getting_started/02_hello_world.md:13
msgid ""
"```\n"
"$ veryl new hello\n"
"[INFO ]      Created \"hello\" project\n"
"$ cd hello\n"
"$ tree\n"
".\n"
"`-- Veryl.toml\n"
"\n"
"0 directories, 1 file\n"
"```"
msgstr ""
"```\n"
"$ veryl new hello\n"
"[INFO ]      Created \"hello\" project\n"
"$ cd hello\n"
"$ tree\n"
".\n"
"`-- Veryl.toml\n"
"\n"
"0 directories, 1 file\n"
"```"

#: src/03_getting_started/02_hello_world.md:24
msgid "`Veryl.toml` is the project configuration."
msgstr "`Veryl.toml` はプロジェクトの設定ファイルです。"

#: src/03_getting_started/02_hello_world.md:26
msgid ""
"```toml\n"
"[project]\n"
"name = \"hello\"\n"
"version = \"0.1.0\"\n"
"```"
msgstr ""
"```toml\n"
"[project]\n"
"name = \"hello\"\n"
"version = \"0.1.0\"\n"
"```"

#: src/03_getting_started/02_hello_world.md:32
msgid ""
"The description of all configuration is [here]"
"(../05_development_environment/01_project_configuration.md)."
msgstr ""
"全設定の説明は[こちら]"
"(../05_development_environment/01_project_configuration.md)。"

#: src/03_getting_started/02_hello_world.md:34
msgid "Write Code"
msgstr "コードを書く"

#: src/03_getting_started/02_hello_world.md:36
msgid ""
"You can add source codes at an arbitrary position in the project directory. "
"This is because Veryl project can be independent or integrated to other "
"SystemVerilog project. The extension of Veryl's source codes is `.veryl`."
msgstr ""
"ソースコードはプロジェクトディレクトリ内のどこに書いても構いません。これは "
"Veryl プロジェクトが独立したプロジェクトである場合もあれば、他の"
"SystemVerilog プロジェクトに組み込まれている場合もあるからです。Veryl のソー"
"スコードの拡張子は `.veryl` です。"

#: src/03_getting_started/02_hello_world.md:40
msgid "For example, put the following code to `src/hello.veryl`."
msgstr "例えば以下のコードを `src/hello.veryl` に書いてみましょう。"

#: src/03_getting_started/02_hello_world.md:42
#: src/05_language_reference/05_statement/02_function_call.md:6
msgid ""
"```veryl,playground\n"
"module ModuleA {\n"
"    initial {\n"
"        $display(\"Hello, world!\");\n"
"    }\n"
"}\n"
"```"
msgstr ""
"```veryl,playground\n"
"module ModuleA {\n"
"    initial {\n"
"        $display(\"Hello, world!\");\n"
"    }\n"
"}\n"
"```"

#: src/03_getting_started/02_hello_world.md:60
msgid ""
"Note: Some source codes in the book have play button \"▶\" which will be "
"appeared when mouse cursor is hovered at the code. If you click the button, "
"the transpiled SystemVerilog code will appear. Please try to click the "
"button of `module ModuleA` code."
msgstr ""
"注：この本のいくつかのソースコードには、マウスをホバーすると現れるプレイボタ"
"ン \"▶\" があります。ボタンをクリックすると、トランスパイルされた "
"SystemVerilog のコードが現れます。`module ModuleA` のコードのボタンを押してみ"
"ましょう。"

#: src/03_getting_started/02_hello_world.md:63
msgid "Build Code"
msgstr "ビルドする"

#: src/03_getting_started/02_hello_world.md:65
msgid "You can generate a SystemVerilog code by `veryl build`."
msgstr "`veryl build` コマンドで SystemVerilog のソースコードを生成できます。"

#: src/03_getting_started/02_hello_world.md:83
msgid ""
"By default, SystemVerilog code will be generated at the same directory as "
"Veryl code. The generated code is `src/hello.sv`."
msgstr ""
"デフォルトでは SystemVerilog のコードは Veryl のコードと同じディレクトリに生"
"成されます。つまり `src/hello.sv` です。"

#: src/03_getting_started/02_hello_world.md:86
msgid ""
"```verilog\n"
"module hello_ModuleA;\n"
"    initial begin\n"
"        $display(\"Hello, world!\");\n"
"    end\n"
"endmodule\n"
"```"
msgstr ""
"```verilog\n"
"module hello_ModuleA;\n"
"    initial begin\n"
"        $display(\"Hello, world!\");\n"
"    end\n"
"endmodule\n"
"```"

#: src/03_getting_started/02_hello_world.md:94
msgid ""
"Additionally, `hello.f` which is the filelist of generated codes will be "
"generated. You can use it for SystemVerilog compiler. The following example "
"is to use [Verilator](https://www.veripool.org/verilator/)."
msgstr ""
"さらに、生成されたコードのファイルリスト `hello.f` も生成されます。これは "
"SystemVerilog コンパイラで使用できます。[Verilator](https://www.veripool.org/"
"verilator/) で使用するには以下のようにします。"

#: src/04_code_examples.md:3
msgid ""
"Veryl has the almost same semantics as SystemVerilog. If you are used to "
"SystemVerilog, you will guess Veryl semantics with a small example source "
"code."
msgstr ""
"Veryl は SystemVerilog とほとんど同じセマンティクスを持っています。もし "
"SystemVerilog に慣れていれば、いくつかの例をみるだけで Veryl の構文をだいたい"
"把握できるでしょう。"

#: src/04_code_examples.md:6
msgid ""
"This is a small example. In the following example, comments show the "
"difference with SystemVerilog syntax."
msgstr ""
"この小さな例では、コメントに SystemVerilog 構文との違いが書かれています。"

#: src/04_code_examples.md:9
msgid ""
"```veryl,playground,editable\n"
"module ModuleA (\n"
"    // name is first, and type is followed after `:`\n"
"    // bit width is represented by `<>`\n"
"    i_data: input  logic<10>,\n"
"    o_data: output logic<10>,\n"
"\n"
"    // use `{}` instead of `begin`/`end`\n"
") {\n"
"    assign o_data = i_data;\n"
"}\n"
"```"
msgstr ""
"```veryl,playground,editable\n"
"module ModuleA (\n"
"    // 識別子が先で `:` の後に型が来ます\n"
"    // ビット幅は `<>` で表されます\n"
"    i_data: input  logic<10>,\n"
"    o_data: output logic<10>,\n"
"\n"
"    // `begin`/`end` ではなく `{}` を使います\n"
") {\n"
"    assign o_data = i_data;\n"
"}\n"
"```"

#: src/04_code_examples.md:22
msgid ""
"Additionally, the codeblocks in this chapter can be edit. Let's try to edit "
"and play each code."
msgstr ""
"さらに、この章のコードブロックは編集することもできます。それぞれのコードを編"
"集して実行してみましょう。"

#: src/04_code_examples.md:24
msgid ""
"A source code of Veryl has some `module`, `interface` and `package` like "
"SystemVerilog. In this chapter, we'll show the some example source codes of "
"them."
msgstr ""
"Veryl のソースコードは SystemVerilog と同様に、`module`、`interface`、"
"`package` を持ちます。この章ではそれらの例を示します。"

#: src/04_code_examples/01_module.md:3
msgid ""
"```veryl,playground,editable\n"
"// module definition\n"
"module ModuleA #(\n"
"    param ParamA: u32 = 10,\n"
"    local ParamB: u32 = 10, // trailing comma is allowed\n"
") (\n"
"    i_clk : input  logic,\n"
"    i_rst : input  logic,\n"
"    i_sel : input  logic,\n"
"    i_data: input  logic<ParamA> [2], // `[]` means unpacked array in "
"SystemVerilog\n"
"    o_data: output logic<ParamA>    , // `<>` means packed array in "
"SystemVerilog\n"
") {\n"
"    // local parameter declaration\n"
"    //   `param` is not allowed in module\n"
"    local ParamC: u32 = 10;\n"
"\n"
"    // variable declaration\n"
"    var r_data0: logic<ParamA>;\n"
"    var r_data1: logic<ParamA>;\n"
"\n"
"    // value binding\n"
"    let _w_data2: logic<ParamA> = i_data;\n"
"\n"
"    // always_ff statement with reset\n"
"    //   `always_ff` can take a mandatory clock and a optional reset\n"
"    //   `if_reset` means `if (i_rst)`. This conceals reset porality\n"
"    //   `()` of `if` is not required\n"
"    //   `=` in `always_ff` is non-blocking assignment\n"
"    always_ff (i_clk, i_rst) {\n"
"        if_reset {\n"
"            r_data0 = 0;\n"
"        } else if i_sel {\n"
"            r_data0 = i_data[0];\n"
"        } else {\n"
"            r_data0 = i_data[1];\n"
"        }\n"
"    }\n"
"\n"
"    // always_ff statement without reset\n"
"    always_ff (i_clk) {\n"
"        r_data1 = r_data0;\n"
"    }\n"
"\n"
"    assign o_data = r_data1;\n"
"}\n"
"```"
msgstr ""
"```veryl,playground,editable\n"
"// モジュール定義\n"
"module ModuleA #(\n"
"    param ParamA: u32 = 10,\n"
"    local ParamB: u32 = 10, // 末尾カンマが可能です\n"
") (\n"
"    i_clk : input  logic,\n"
"    i_rst : input  logic,\n"
"    i_sel : input  logic,\n"
"    i_data: input  logic<ParamA> [2], // `[]` は SystemVerilog のアンパック配"
"列です\n"
"    o_data: output logic<ParamA>    , // `<>` は SystemVerilog のパック配列で"
"す\n"
") {\n"
"    // ローカルパラメータ宣言\n"
"    //   モジュール内では `param` は使えません\n"
"    local ParamC: u32 = 10;\n"
"\n"
"    // 変数宣言\n"
"    var r_data0: logic<ParamA>;\n"
"    var r_data1: logic<ParamA>;\n"
"\n"
"    // 値の束縛\n"
"    let w_data2: logic<ParamA> = i_data;\n"
"\n"
"    // リセット付き always_ff 文\n"
"    //   `always_ff` はクロック（必須）とリセット（オプション）を持ちます\n"
"    //   `if_reset` は `if (i_rst)` を意味し、リセット極性を隠蔽するための構"
"文です\n"
"    //   `if` 文に `()` はいりません\n"
"    //   `always_ff` 内の `=` はノンブロッキング代入です\n"
"    always_ff (i_clk, i_rst) {\n"
"        if_reset {\n"
"            r_data0 = 0;\n"
"        } else if i_sel {\n"
"            r_data0 = i_data[0];\n"
"        } else {\n"
"            r_data0 = i_data[1];\n"
"        }\n"
"    }\n"
"\n"
"    // リセットなし always_ff 文\n"
"    always_ff (i_clk) {\n"
"        r_data1 = r_data0;\n"
"    }\n"
"\n"
"    assign o_data = r_data1;\n"
"}\n"
"```"

#: src/04_code_examples/02_instantiation.md:3
msgid ""
"```veryl,playground,editable\n"
"module ModuleA #(\n"
"    param ParamA: u32 = 10,\n"
") (\n"
"    i_clk : input  logic,\n"
"    i_rst : input  logic,\n"
"    i_data: input  logic<ParamA>,\n"
"    o_data: output logic<ParamA>,\n"
") {\n"
"    var r_data1: logic<ParamA>;\n"
"    var r_data2: logic<ParamA>;\n"
"\n"
"    assign r_data1 = i_data + 1;\n"
"    assign o_data  = r_data2 + 2;\n"
"\n"
"    // instance declaration\n"
"    //   `inst` keyword starts instance declaration\n"
"    //   port connnection can be specified by `()`\n"
"    //   each port connection is `[port_name]:[variable]`\n"
"    //   `[port_name]` means `[port_name]:[port_name]`\n"
"    inst u_module_b: ModuleB (\n"
"        i_clk          ,\n"
"        i_data: r_data1,\n"
"        o_data: r_data2,\n"
"    );\n"
"\n"
"    // instance declaration with parameter override\n"
"    //   notation of parameter connection is the same as port\n"
"    inst u_module_c: ModuleC #(\n"
"        ParamA,\n"
"        ParamB: 10,\n"
"    ) ();\n"
"}\n"
"\n"
"module ModuleB #(\n"
"    param ParamA: u32 = 10,\n"
") (\n"
"    i_clk : input  logic        ,\n"
"    i_data: input  logic<ParamA>,\n"
"    o_data: output logic<ParamA>,\n"
") {}\n"
"\n"
"module ModuleC #(\n"
"    param ParamA: u32 = 10,\n"
"    param ParamB: u32 = 10,\n"
") () {}\n"
"```"
msgstr ""
"```veryl,playground,editable\n"
"module ModuleA #(\n"
"    param ParamA: u32 = 10,\n"
") (\n"
"    i_clk : input  logic,\n"
"    i_rst : input  logic,\n"
"    i_data: input  logic<ParamA>,\n"
"    o_data: output logic<ParamA>,\n"
") {\n"
"    var r_data1: logic<ParamA>;\n"
"    var r_data2: logic<ParamA>;\n"
"\n"
"    assign r_data1 = i_data + 1;\n"
"    assign o_data  = r_data2 + 2;\n"
"\n"
"    // インスタンス宣言\n"
"    //   インスタンス宣言は `inst` キーワードではじまります\n"
"    //   ポート接続は `()` 内で指定します\n"
"    //   各ポートの接続は `[port_name]:[variable]` のような形式になります\n"
"    //   `[port_name]` は `[port_name]:[port_name]` を意味します\n"
"    inst u_module_b: ModuleB (\n"
"        i_clk,\n"
"        i_rst,\n"
"        i_data: r_data1,\n"
"        o_data: r_data2,\n"
"    );\n"
"\n"
"    // パラメータオーバーライド付きインスタンス宣言\n"
"    //   パラメータの接続記法はポートと同様です\n"
"    inst u_module_c: ModuleC #(\n"
"        ParamA,\n"
"        ParamB: 10,\n"
"    ) (\n"
"        i_clk,\n"
"        i_rst,\n"
"        i_data: r_data1,\n"
"        o_data: r_data2,\n"
"    );\n"
"}\n"
"```"

#: src/04_code_examples/03_interface.md:3
msgid ""
"```veryl,playground,editable\n"
"// interface definition\n"
"interface InterfaceA #(\n"
"    param ParamA: u32 = 1,\n"
"    param ParamB: u32 = 1,\n"
") {\n"
"    local ParamC: u32 = 1;\n"
"\n"
"    var a: logic<ParamA>;\n"
"    var b: logic<ParamA>;\n"
"    var c: logic<ParamA>;\n"
"\n"
"    // modport definition\n"
"    modport master {\n"
"        a: input ,\n"
"        b: input ,\n"
"        c: output,\n"
"    }\n"
"\n"
"    modport slave {\n"
"        a: input ,\n"
"        b: input ,\n"
"        c: output,\n"
"    }\n"
"}\n"
"\n"
"module ModuleA (\n"
"    i_clk     : input logic               ,\n"
"    i_rst     : input logic               ,\n"
"    // port declaration by modport\n"
"    intf_a_mst: modport InterfaceA::master,\n"
"    intf_a_slv: modport InterfaceA::slave ,\n"
") {\n"
"    // interface instantiation\n"
"    inst u_intf_a: InterfaceA [10];\n"
"}\n"
"```"
msgstr ""
"```veryl,playground,editable\n"
"// インターフェース定義\n"
"interface InterfaceA #(\n"
"    param ParamA: u32 = 1,\n"
"    param ParamB: u32 = 1,\n"
") {\n"
"    local ParamC: u32 = 1;\n"
"\n"
"    var a: logic<ParamA>;\n"
"    var b: logic<ParamA>;\n"
"    var c: logic<ParamA>;\n"
"\n"
"    // modport 定義\n"
"    modport master {\n"
"        a: input ,\n"
"        b: input ,\n"
"        c: output,\n"
"    }\n"
"\n"
"    modport slave {\n"
"        a: input ,\n"
"        b: input ,\n"
"        c: output,\n"
"    }\n"
"}\n"
"\n"
"module ModuleA (\n"
"    i_clk     : input logic               ,\n"
"    i_rst     : input logic               ,\n"
"    // modport によるポート宣言\n"
"    intf_a_mst: modport InterfaceA::master,\n"
"    intf_a_slv: modport InterfaceA::slave ,\n"
") {\n"
"    // インターフェースのインスタンス\n"
"    inst u_intf_a: InterfaceA [10];\n"
"}\n"
"```"

#: src/04_code_examples/04_package.md:3
msgid ""
"```veryl,playground,editable\n"
"// package definition\n"
"package PackageA {\n"
"    local ParamA: u32 = 1;\n"
"    local ParamB: u32 = 1;\n"
"\n"
"    function FuncA (\n"
"        a: input  logic<ParamA>,\n"
"    ) -> logic<ParamA> {\n"
"        return a + 1;\n"
"    }\n"
"}\n"
"\n"
"module ModuleA {\n"
"    let a : logic<10> = PackageA::ParamA;\n"
"    let _b: logic<10> = PackageA::FuncA(a);\n"
"}\n"
"```"
msgstr ""
"```veryl,playground,editable\n"
"// パッケージ定義\n"
"package PackageA {\n"
"    local ParamA: u32 = 1;\n"
"    local ParamB: u32 = 1;\n"
"\n"
"    function FuncA (\n"
"        a: input  logic<ParamA>,\n"
"    ) -> logic<ParamA> {\n"
"        return a + 1;\n"
"    }\n"
"}\n"
"\n"
"module ModuleA {\n"
"    let a : logic<10> = PackageA::ParamA;\n"
"    let _b: logic<10> = PackageA::FuncA(a);\n"
"}\n"
"```"

#: src/05_language_reference.md:3
msgid "In this chapter, we'll discuss the lauguage definition of Veryl."
msgstr "この章では Veryl の言語仕様について説明します。"

#: src/05_language_reference/01_source_code_structure.md:3
msgid ""
"Veryl's source code is composed by some `module`, `interface` and `package`."
msgstr ""
"Veryl のソースコードはいくつかの `module`、`interface`、`package` からなりま"
"す。"

#: src/05_language_reference/01_source_code_structure.md:19
msgid ""
"The name of `module`, `interface` and `package` in the transpiled code will "
"added project name as prefix. In the sample code, `project_` will be added. "
"It is to avoid name conflict between projects."
msgstr ""
"トランスパイルされたコードにおける `module`、`interface`、`package` の名前に"
"は先頭にプロジェクト名が付きます。このサンプルコードでは `project_` が付きま"
"す。これはプロジェクト間で名前が衝突するのを防ぐためです。"

#: src/05_language_reference/02_lexical_structure.md:3
msgid ""
"This chapter shows the lexical structure of Veryl. At the first, we'll "
"discuss about the general parts in it."
msgstr ""
"この章では Veryl の字句構造について説明します。まず始めに、全体的なことがらか"
"らです。"

#: src/05_language_reference/02_lexical_structure.md:6
msgid "Encoding"
msgstr "エンコーディング"

#: src/05_language_reference/02_lexical_structure.md:8
msgid "The encoding of Veryl source code should be UTF-8."
msgstr "Veryl のソースコードは UTF-8 エンコーディングでなければなりません。"

#: src/05_language_reference/02_lexical_structure.md:10
msgid "White Space"
msgstr "空白"

#: src/05_language_reference/02_lexical_structure.md:12
msgid ""
"` `(white space), `\\t` and `\\n` are treated as white space. All of them "
"are skipped by Veryl's parser."
msgstr ""
"` `（空白）、`\\t`、`\\n` は空白として扱われ、Veryl のパーサはこれらを全て無"
"視します。"

#: src/05_language_reference/02_lexical_structure.md:15
msgid "Comment"
msgstr "コメント"

#: src/05_language_reference/02_lexical_structure.md:17
msgid ""
"Single line comment and multi line comment can be used. Almost all comment "
"will be outputted at the transpiled code."
msgstr ""
"行コメントと複数行コメントが使えます。ほとんどのコメントはトランスパイルされ"
"たコードにも出力されます。"

#: src/05_language_reference/02_lexical_structure.md:20
msgid ""
"```veryl,playground\n"
"// single line comment\n"
"\n"
"/*\n"
"multi\n"
"\n"
"line\n"
"\n"
"comment\n"
"*/\n"
"```"
msgstr ""
"```veryl,playground\n"
"// 行コメント\n"
"\n"
"/*\n"
"複数\n"
"\n"
"行\n"
"\n"
"コメント\n"
"*/\n"
"```"

#: src/05_language_reference/02_lexical_structure.md:34
msgid ""
"Signle line comment starts with `///` is treated as documentation comment. "
"Documentation comment is used for document generation."
msgstr ""
"`///` ではじまる行コメントはドキュメンテーションコメントとして扱われます。ド"
"キュメンテーションコメントはドキュメントの生成に使われます。"

#: src/05_language_reference/02_lexical_structure.md:37
msgid ""
"```veryl,playground\n"
"/// documentation comment\n"
"```"
msgstr ""
"```veryl,playground\n"
"/// ドキュメンテーションコメント\n"
"```"

#: src/05_language_reference/02_lexical_structure.md:41
msgid "Identifier"
msgstr "識別子"

#: src/05_language_reference/02_lexical_structure.md:43
msgid ""
"Identifier is composed with ASCII alphabet and number and `_`. Leading "
"number is not allowed. The following regular expression shows the definition."
msgstr ""
"識別子は ASCII のアルファベットと数値、 `_` からなります。先頭が数値であって"
"はなりません。正式な定義は以下の正規表現です。"

#: src/05_language_reference/02_lexical_structure.md:51
msgid "String"
msgstr "文字列"

#: src/05_language_reference/02_lexical_structure.md:53
msgid ""
"String is surrounded by `\"`. Escape by `\\` can be used like `\\\"`, `\\n` "
"and so on."
msgstr ""
"`\"` で囲んだものが文字列になります。`\\\"` や `\\n` のように `\\` によるエス"
"ケープも可能です。"

#: src/05_language_reference/02_lexical_structure.md:56
msgid ""
"```\n"
"\"Hello, World!\"\n"
"```"
msgstr ""
"```\n"
"\"Hello, World!\"\n"
"```"

#: src/05_language_reference/02_lexical_structure/01_operator.md:3
msgid ""
"Almost all operators are the same as SystemVerilog. Please be careful the "
"some differences."
msgstr ""
"ほとんどの演算子は SystemVerilog と同じです。いくつか違いがあるので注意してく"
"ださい。"

#: src/05_language_reference/02_lexical_structure/01_operator.md:6
msgid "`<:` less than operator which is the same as `<` in SystemVerilog."
msgstr "`<:` 小なり演算子です。SystemVerilog の `<` と同じです。"

#: src/05_language_reference/02_lexical_structure/01_operator.md:7
msgid "`>:` greater than operator which is the same as `>` in SystemVerilog."
msgstr "`>:` 大なり演算子です。SystemVerilog の `>` と同じです。"

#: src/05_language_reference/02_lexical_structure/01_operator.md:9
msgid ""
"```veryl\n"
"// unary arithmetic\n"
"a = +1;\n"
"a = -1;\n"
"\n"
"// unary logical\n"
"a = !1;\n"
"a = ~1;\n"
"\n"
"// unary reduce\n"
"a = &1;\n"
"a = |1;\n"
"a = ^1;\n"
"a = ~&1;\n"
"a = ~|1;\n"
"a = ~^1;\n"
"a = ^~1;\n"
"\n"
"// binary arithmetic\n"
"a = 1 ** 1;\n"
"a = 1 * 1;\n"
"a = 1 / 1;\n"
"a = 1 % 1;\n"
"a = 1 + 1;\n"
"a = 1 - 1;\n"
"\n"
"// binary shift\n"
"a = 1 << 1;\n"
"a = 1 >> 1;\n"
"a = 1 <<< 1;\n"
"a = 1 >>> 1;\n"
"\n"
"// binary compare\n"
"a = 1 <: 1;\n"
"a = 1 <= 1;\n"
"a = 1 >: 1;\n"
"a = 1 >= 1;\n"
"a = 1 == 1;\n"
"a = 1 != 1;\n"
"a = 1 === 1;\n"
"a = 1 !== 1;\n"
"a = 1 ==? 1;\n"
"a = 1 !=? 1;\n"
"\n"
"// binary bitwise\n"
"a = 1 & 1;\n"
"a = 1 ^ 1;\n"
"a = 1 ~^ 1;\n"
"a = 1 ^~ 1;\n"
"a = 1 | 1;\n"
"\n"
"// binary logical\n"
"a = 1 && 1;\n"
"a = 1 || 1;\n"
"```"
msgstr ""
"```veryl\n"
"// 単項算術演算\n"
"a = +1;\n"
"a = -1;\n"
"\n"
"// 単項論理演算\n"
"a = !1;\n"
"a = ~1;\n"
"\n"
"// 単項集約演算\n"
"a = &1;\n"
"a = |1;\n"
"a = ^1;\n"
"a = ~&1;\n"
"a = ~|1;\n"
"a = ~^1;\n"
"a = ^~1;\n"
"\n"
"// 二項算術演算\n"
"a = 1 ** 1;\n"
"a = 1 * 1;\n"
"a = 1 / 1;\n"
"a = 1 % 1;\n"
"a = 1 + 1;\n"
"a = 1 - 1;\n"
"\n"
"// シフト演算\n"
"a = 1 << 1;\n"
"a = 1 >> 1;\n"
"a = 1 <<< 1;\n"
"a = 1 >>> 1;\n"
"\n"
"// 比較演算\n"
"a = 1 <: 1;\n"
"a = 1 <= 1;\n"
"a = 1 >: 1;\n"
"a = 1 >= 1;\n"
"a = 1 == 1;\n"
"a = 1 != 1;\n"
"a = 1 === 1;\n"
"a = 1 !== 1;\n"
"a = 1 ==? 1;\n"
"a = 1 !=? 1;\n"
"\n"
"// ビット演算\n"
"a = 1 & 1;\n"
"a = 1 ^ 1;\n"
"a = 1 ~^ 1;\n"
"a = 1 ^~ 1;\n"
"a = 1 | 1;\n"
"\n"
"// 二項論理演算\n"
"a = 1 && 1;\n"
"a = 1 || 1;\n"
"```"

#: src/05_language_reference/02_lexical_structure/02_number.md:3
msgid "Integer"
msgstr "整数"

#: src/05_language_reference/02_lexical_structure/02_number.md:5
msgid ""
"```veryl\n"
"// integer\n"
"0123456789\n"
"01_23_45_67_89\n"
"\n"
"// binary\n"
"32'b01xzXZ\n"
"32'b01_xz_XZ\n"
"\n"
"// octal\n"
"32'o01234567xzXZ\n"
"32'o01_23_45_67_xz_XZ\n"
"\n"
"// decimal\n"
"32'd0123456789\n"
"32'd01_23_45_67_89\n"
"\n"
"// hex\n"
"128'h0123456789abcdefxzABCDEFXZ\n"
"128'h01_23_45_67_89_ab_cd_ef_xz_AB_CD_EF_XZ\n"
"```"
msgstr ""
"```veryl\n"
"// 整数\n"
"0123456789\n"
"01_23_45_67_89\n"
"\n"
"// 2進数\n"
"32'b01xzXZ\n"
"32'b01_xz_XZ\n"
"\n"
"// 8進数\n"
"32'o01234567xzXZ\n"
"32'o01_23_45_67_xz_XZ\n"
"\n"
"// 10進数\n"
"32'd0123456789\n"
"32'd01_23_45_67_89\n"
"\n"
"// 16進数\n"
"128'h0123456789abcdefxzABCDEFXZ\n"
"128'h01_23_45_67_89_ab_cd_ef_xz_AB_CD_EF_XZ\n"
"```"

#: src/05_language_reference/02_lexical_structure/02_number.md:27
msgid "Set all bits"
msgstr "全ビットのセット"

#: src/05_language_reference/02_lexical_structure/02_number.md:29
msgid ""
"```veryl\n"
"// all 0\n"
"'0\n"
"\n"
"// all 1\n"
"'1\n"
"\n"
"// all x\n"
"'x\n"
"'X\n"
"\n"
"// all z\n"
"'z\n"
"'Z\n"
"```"
msgstr ""
"```veryl\n"
"// 全て 0\n"
"'0\n"
"\n"
"// 全て 1\n"
"'1\n"
"\n"
"// 全て x\n"
"'x\n"
"'X\n"
"\n"
"// 全て z\n"
"'z\n"
"'Z\n"
"```"

#: src/05_language_reference/02_lexical_structure/02_number.md:45
msgid "Widthless integer"
msgstr "幅なし整数"

#: src/05_language_reference/02_lexical_structure/02_number.md:47
msgid ""
"The bit width specification of integer can be omitted. If it is omitted, the "
"appropriate width will be filled in the translated code."
msgstr ""
"ビット幅指定は省略することができます。省略された場合、トランスパイルされた"
"コードでは適切なビット幅が付与されます。"

#: src/05_language_reference/02_lexical_structure/02_number.md:59
msgid "Set sized bits"
msgstr "指定ビットのセット"

#: src/05_language_reference/02_lexical_structure/02_number.md:61
msgid "The bit width specification can be added to \"set all bits\"."
msgstr "\"全ビットのセット\" にビット幅指定を付与することもできます。"

#: src/05_language_reference/02_lexical_structure/02_number.md:72
msgid "Floating point"
msgstr "浮動小数点数"

#: src/05_language_reference/02_lexical_structure/02_number.md:74
msgid ""
"```veryl\n"
"// floating point\n"
"0123456789.0123456789\n"
"01_23_45_67_89.01_23_45_67_89\n"
"\n"
"// floating with exponent\n"
"0123456789.0123456789e+0123456789\n"
"01_23_45_67_89.01_23_45_67_89E-01_23_45_67_89\n"
"```"
msgstr ""
"```veryl\n"
"// 浮動小数点数\n"
"0123456789.0123456789\n"
"01_23_45_67_89.01_23_45_67_89\n"
"\n"
"// 指数表記\n"
"0123456789.0123456789e+0123456789\n"
"01_23_45_67_89.01_23_45_67_89E-01_23_45_67_89\n"
"```"

#: src/05_language_reference/03_data_type.md:3
msgid "In this chapter, we'll discuss about data type."
msgstr "この章ではデータ型について説明します。"

#: src/05_language_reference/03_data_type/01_builtin_type.md:3
msgid "4-state data type which has variable width"
msgstr "幅指定可能な4値データ型"

#: src/05_language_reference/03_data_type/01_builtin_type.md:5
msgid ""
"`logic` is 4-state (`0`, `1`, `x`, `z`) data type. The variable width can be "
"specified by `<>` after `logic`. Multi-dimentional can be specified by `<X, "
"Y, Z,,,>`."
msgstr ""
"`logic` は4値（`0`、`1`、`x`、`z`）のデータ型です。幅は `logic` のあとの "
"`<>` で指定できます。`<X, Y, Z,,,>` のように多次元指定も可能です。"

#: src/05_language_reference/03_data_type/01_builtin_type.md:17
msgid "2-state data type which has variable width"
msgstr "幅指定可能な2値データ型"

#: src/05_language_reference/03_data_type/01_builtin_type.md:19
msgid ""
"`bit` is 2-state (`0`, `1`) data type. The variable width can be specified "
"by `<>` after `bit`. Multi-dimentional can be specified by `<X, Y, Z,,,>`."
msgstr ""
"`bit` は2値（`0`、`1`）のデータ型です。幅は `logic` のあとの `<>` で指定でき"
"ます。`<X, Y, Z,,,>` のように多次元指定も可能です。"

#: src/05_language_reference/03_data_type/01_builtin_type.md:31
msgid "Integer type"
msgstr "整数型"

#: src/05_language_reference/03_data_type/01_builtin_type.md:33
msgid "There are some integer types:"
msgstr "整数型にはいくつかの種類があります。"

#: src/05_language_reference/03_data_type/01_builtin_type.md:35
msgid "`u32`: 32bit unsigned integer"
msgstr "`u32`：32ビットの符号なし整数"

#: src/05_language_reference/03_data_type/01_builtin_type.md:36
msgid "`u64`: 64bit unsigned integer"
msgstr "`u64`：64ビットの符号なし整数"

#: src/05_language_reference/03_data_type/01_builtin_type.md:37
msgid "`i32`: 32bit signed integer"
msgstr "`i32`：32ビットの符号付き整数"

#: src/05_language_reference/03_data_type/01_builtin_type.md:38
msgid "`i64`: 64bit signed integer"
msgstr "`i64`：64ビットの符号付き整数"

#: src/05_language_reference/03_data_type/01_builtin_type.md:49
msgid "Floating point type"
msgstr "浮動小数点数型"

#: src/05_language_reference/03_data_type/01_builtin_type.md:51
msgid "There are some floating point types:"
msgstr "浮動小数点数型にもいくつかの種類があります。"

#: src/05_language_reference/03_data_type/01_builtin_type.md:53
msgid "`f32`: 32bit floating point"
msgstr "`f32`：32ビット浮動小数点数"

#: src/05_language_reference/03_data_type/01_builtin_type.md:54
msgid "`f64`: 64bit floating point"
msgstr "`f64`：64ビット浮動小数点数"

#: src/05_language_reference/03_data_type/01_builtin_type.md:56
msgid "Both of them are represented as described by IEEE Std 754."
msgstr "いずれも IEEE Std 754 準拠の表現です。"

#: src/05_language_reference/03_data_type/01_builtin_type.md:67
msgid "String type"
msgstr "文字列型"

#: src/05_language_reference/03_data_type/01_builtin_type.md:69
msgid "`string` is string type."
msgstr "`string` は文字列を表す型です。"

#: src/05_language_reference/03_data_type/01_builtin_type.md:77
msgid "Type type"
msgstr "Type型"

#: src/05_language_reference/03_data_type/01_builtin_type.md:79
msgid ""
"`type` is a type which represents type kind. Variable of `type` can be "
"defined as `param` or `local` only."
msgstr ""
"`type` は型の種類を表す型です。`type` 型の変数は `param` か `local` としての"
"み定義可能です。"

#: src/05_language_reference/03_data_type/02_user_defined_type.md:3
msgid "Struct"
msgstr "構造体"

#: src/05_language_reference/03_data_type/02_user_defined_type.md:5
msgid ""
"`struct` is composite data type. It can contain some fields, and these "
"fields can be access through `.` operator."
msgstr ""
"`struct` は複合データ型です。いくつかのフィールドを持つことができ、`.` 演算子"
"を通してアクセスできます。"

#: src/05_language_reference/03_data_type/02_user_defined_type.md:24
msgid "Enum"
msgstr "列挙型"

#: src/05_language_reference/03_data_type/02_user_defined_type.md:26
msgid ""
"`enum` is enumerable type. It has some named variant, and the value of "
"`enum` can be set to the one of them. The variant name can be specified by "
"`[enum name]::[variant name]`. Each variant has the corresponding integral "
"value. The value can be specified by `=`. Otherwise, it is assigned "
"automatically."
msgstr ""
"`enum` は列挙型です。名前の付いたバリアントを複数持ち、`enum` 型の変数にはそ"
"のバリアントのうち1つだけをセットできます。バリアント名は `[enum name]::"
"[variant name]` の形式で指定可能です。それぞれのバリアントは対応する整数値を"
"持ち、`=` で指定することができます。指定されなかった場合は自動的に割り当てら"
"れます。"

#: src/05_language_reference/03_data_type/02_user_defined_type.md:46
msgid "Union"
msgstr "ユニオン"

#: src/05_language_reference/03_data_type/02_user_defined_type.md:48
msgid ""
"A Veryl `union` is a packed, untagged sum type and is transpiled to "
"SystemVerilog's `packed union`. Each  union variant should have the same "
"packed width as each other union variant."
msgstr ""
"`union` はパックされたタグなしの直和型で、SystemVerilog では `packed union` "
"にトランスパイルされます。ユニオンのそれぞれのバリアントの幅は同じでなければ"
"なりません。"

#: src/05_language_reference/03_data_type/02_user_defined_type.md:64
msgid "Typedef"
msgstr "型定義"

#: src/05_language_reference/03_data_type/02_user_defined_type.md:66
msgid ""
"The `type` keyword can be used to define a type alias to scalar or array "
"types."
msgstr ""
"`type` キーワードを使って、スカラー型や配列型への型エイリアスを定義することが"
"できます。"

#: src/05_language_reference/03_data_type/03_array.md:3
msgid ""
"Array can be defined by appending `[]` to any data type. The length of array "
"can be specified by the value in `[]`."
msgstr ""
"任意のデータ型に対して `[]` と付与することで配列を定義することができます。配"
"列の長さは `[]` 内の値で指定します。"

#: src/05_language_reference/03_data_type/03_array.md:22
msgid "Multi-dimentional array can be defined by `[X, Y, Z,,,]`."
msgstr "`[X, Y, Z,,,]` のように多次元配列も定義できます。"

#: src/05_language_reference/04_expression.md:3
msgid ""
"In this chapter, we'll discuss about expression. Expression is combination "
"of variable, operator, function call, and so on. It can be evaluated to a "
"value."
msgstr ""
"この章では式について説明します。式は変数や演算子、関数呼び出しなどを組み合わ"
"せたもので、評価して値を得ることができます。"

#: src/05_language_reference/04_expression/01_operator_precedence.md:3
msgid "In expression, operator precedence is almost the same as SystemVerilog."
msgstr "式内での演算子の優先順位は SystemVerilog とほとんど同じです。"

#: src/05_language_reference/04_expression/01_operator_precedence.md:5
msgid "Associativity"
msgstr "結合性"

#: src/05_language_reference/04_expression/01_operator_precedence.md:5
msgid "Precedence"
msgstr "優先順位"

#: src/05_language_reference/04_expression/01_operator_precedence.md:7
msgid "`()` `[]` `::` `.`"
msgstr "`()` `[]` `::` `.`"

#: src/05_language_reference/04_expression/01_operator_precedence.md:7
#: src/05_language_reference/04_expression/01_operator_precedence.md:8
#: src/05_language_reference/04_expression/01_operator_precedence.md:9
#: src/05_language_reference/04_expression/01_operator_precedence.md:10
#: src/05_language_reference/04_expression/01_operator_precedence.md:11
#: src/05_language_reference/04_expression/01_operator_precedence.md:12
#: src/05_language_reference/04_expression/01_operator_precedence.md:13
#: src/05_language_reference/04_expression/01_operator_precedence.md:14
#: src/05_language_reference/04_expression/01_operator_precedence.md:15
#: src/05_language_reference/04_expression/01_operator_precedence.md:16
#: src/05_language_reference/04_expression/01_operator_precedence.md:17
#: src/05_language_reference/04_expression/01_operator_precedence.md:18
#: src/05_language_reference/04_expression/01_operator_precedence.md:19
msgid "Left"
msgstr "左"

#: src/05_language_reference/04_expression/01_operator_precedence.md:7
msgid "Highest"
msgstr "高い"

#: src/05_language_reference/04_expression/01_operator_precedence.md:8
msgid "`+` `-` `!` `~` `&` `~&` "
msgstr "`+` `-` `!` `~` `&` `~&` "

#: src/05_language_reference/04_expression/01_operator_precedence.md:8
#: src/05_language_reference/04_expression/01_operator_precedence.md:17
msgid "\\|"
msgstr "\\|"

#: src/05_language_reference/04_expression/01_operator_precedence.md:8
msgid "~\\|"
msgstr "~\\|"

#: src/05_language_reference/04_expression/01_operator_precedence.md:8
msgid " `^` `~^` `^~` (unary)"
msgstr " `^` `~^` `^~` (単項)"

#: src/05_language_reference/04_expression/01_operator_precedence.md:9
msgid "`**`"
msgstr "`**`"

#: src/05_language_reference/04_expression/01_operator_precedence.md:10
msgid "`*` `/` `%`"
msgstr "`*` `/` `%`"

#: src/05_language_reference/04_expression/01_operator_precedence.md:11
msgid "`+` `-` (binary)"
msgstr "`+` `-` (二項)"

#: src/05_language_reference/04_expression/01_operator_precedence.md:12
msgid "`<<` `>>` `<<<` `>>>`"
msgstr "`<<` `>>` `<<<` `>>>`"

#: src/05_language_reference/04_expression/01_operator_precedence.md:13
msgid "`<:` `<=` `>:` `>=`"
msgstr "`<:` `<=` `>:` `>=`"

#: src/05_language_reference/04_expression/01_operator_precedence.md:14
msgid "`==` `!=` `===` `!==` `==?` `!=?`"
msgstr "`==` `!=` `===` `!==` `==?` `!=?`"

#: src/05_language_reference/04_expression/01_operator_precedence.md:15
msgid "`&` (binary)"
msgstr "`&` (二項)"

#: src/05_language_reference/04_expression/01_operator_precedence.md:16
msgid "`^` `~^` `^~` (binary)"
msgstr "`^` `~^` `^~` (二項)"

#: src/05_language_reference/04_expression/01_operator_precedence.md:17
msgid " (binary)"
msgstr " (二項)"

#: src/05_language_reference/04_expression/01_operator_precedence.md:18
msgid "`&&`"
msgstr "`&&`"

#: src/05_language_reference/04_expression/01_operator_precedence.md:19
msgid "\\|\\|"
msgstr "\\|\\|"

#: src/05_language_reference/04_expression/01_operator_precedence.md:20
msgid "`=` `+=` `-=` `*=` `/=` `%=` `&=` `^=` "
msgstr "`=` `+=` `-=` `*=` `/=` `%=` `&=` `^=` "

#: src/05_language_reference/04_expression/01_operator_precedence.md:20
msgid "\\|="
msgstr "\\|="

#: src/05_language_reference/04_expression/01_operator_precedence.md:20
msgid " `<<=` `>>=` `<<<=` `>>>=`"
msgstr " `<<=` `>>=` `<<<=` `>>>=`"

#: src/05_language_reference/04_expression/01_operator_precedence.md:20
#: src/05_language_reference/04_expression/01_operator_precedence.md:21
msgid "None"
msgstr "なし"

#: src/05_language_reference/04_expression/01_operator_precedence.md:21
msgid "`{}`"
msgstr "`{}`"

#: src/05_language_reference/04_expression/01_operator_precedence.md:21
msgid "Lowest"
msgstr "低い"

#: src/05_language_reference/04_expression/02_function_call.md:3
msgid ""
"Function can be call by `function_name(argument)`. System function of "
"SystemVerilog like `$clog2` can be used too."
msgstr ""
"関数は `function_name(argument)` の形式で呼び出すことができます。`$clog2` の"
"ような SystemVerilog のシステム関数も使えます。"

#: src/05_language_reference/04_expression/03_concatenation.md:3
msgid ""
"`{}` represents bit concatenation. In `{}`, `repeat` keyword can be used to "
"repeat specified operand."
msgstr ""
"`{}` はビット連結を表します。`{}` の中では `repeat` キーワードを使うことで指"
"定されたオペランドを繰り返すこともできます。"

#: src/05_language_reference/04_expression/04_if.md:3
msgid ""
"Conditional expression using `if` can be used. The section which represents "
"condition is placed after `if` keyword, and `()` is not required surrounding "
"it. `else` is mandatory because if expression always have to be evaluated to "
"value."
msgstr ""
"`if` を用いた条件式を使えます。`if` キーワードの後に条件を示す節を置きます"
"が、`()` で囲む必要はありません。if 式は常になんらかの値に評価される必要があ"
"るため `else` は必須です。"

#: src/05_language_reference/04_expression/05_case.md:3
msgid ""
"Another conditional expression is `case`. `case` containts some arms like "
"`expression: expression`. If the expression after `case` keyword matches the "
"left expression of an arm, the right expression of the arm will be returned. "
"`default` is a special arm which will be returned when all other arms are "
"failed. `default` is mandatory because if expression always have to be "
"evaluated to value."
msgstr ""
"もう一つの条件式が `case` です。`case` は `式: 式` という形式の条件を複数持ち"
"ます。もし `case` キーワードの後の式と条件の左側の式が一致すれば、その条件の"
"右側の式が返されます。`default` はそれ以外の条件が全て失敗したときに返される"
"特別な条件です。case 式は常になんらかの値に評価される必要があるため "
"`default` は必須です。"

#: src/05_language_reference/04_expression/06_bit_select.md:3
msgid ""
"`[]` is bit select operator. If an expression is specified to `[]`, single "
"bit is selected. Bit range selection can be specified by `[expression:"
"expression]`."
msgstr ""
"`[]` はビット選択演算子です。`[]` に式を指定すれば1ビットを選択できます。範囲"
"選択する場合は `[式:式]` とします。"

#: src/05_language_reference/04_expression/07_range.md:3
msgid ""
"Range can be specified through range operator. There are two range operator:"
msgstr "範囲は範囲演算子で指定できます。範囲演算子には以下の2種類があります。"

#: src/05_language_reference/04_expression/07_range.md:5
msgid "`..`: half-open interval"
msgstr "`..`：半開区間"

#: src/05_language_reference/04_expression/07_range.md:6
msgid "`..=`: closed interval"
msgstr "`..=`：閉区間"

#: src/05_language_reference/04_expression/07_range.md:8
msgid "Range can be used at some description like `for` statement."
msgstr "範囲は `for` 文などの場所で使うことができます。"

#: src/05_language_reference/04_expression/08_msb_lsb.md:3
msgid ""
"`msb` and `lsb` can be used in bit selection by `[]`. `msb` means most "
"significant bit of the operand. `lsb` means least significant bit of the "
"operand, it is the same as 0."
msgstr ""
"`msb` と `lsb` は `[]` によるビット選択で使用できます。`msb` はオペランドの最"
"上位ビットを意味します。`lsb` はオペランドの最下位ビットを意味し、0と同じで"
"す。"

#: src/05_language_reference/04_expression/09_inside_outside.md:3
msgid ""
"`inside` check the specified expression is inside conditions which are "
"specified in `{}`. Condition can be single expression or [range](./07_range."
"md). If the expression matches any condition, `inside` will return `1`, "
"otherwise `0`. `outside` is vice versa."
msgstr ""
"`inside` は 指定された式が `{}` で与えられた条件内にあるかどうかを調べます。"
"条件は単一の式または[範囲](./07_range.md)を指定できます。条件を満たすとき "
"`inside` は `1` を、そうでなければ `0` を返します。`outside` はその逆です。"

#: src/05_language_reference/05_statement.md:3
msgid ""
"In this chapter, we'll discuss about statement. Statement can be used in "
"some declaration like `always_ff`, `always_comb`."
msgstr ""
"この章では文について説明します。文は `always_ff` や `always_comb` などいくつ"
"かの宣言で使用することができます。"

#: src/05_language_reference/05_statement/01_assignment.md:3
msgid ""
"Assignment statement is `variable = expression;`. Unlike SystemVerilog, "
"assignment operator is `=` in both `always_comb` and `always_ff`. There are "
"other assignment operators:"
msgstr ""
"代入文は `変数 = 式;` の形式です。SystemVerilog と異なり、`always_comb` でも "
"`always_ff` でも代入演算子は `=` です。以下のような代入演算子もあります。"

#: src/05_language_reference/05_statement/01_assignment.md:7
msgid "`+=`: addition assignment"
msgstr "`+=`：加算代入"

#: src/05_language_reference/05_statement/01_assignment.md:8
msgid "`-=`: subtraction assignment"
msgstr "`-=`：減算代入"

#: src/05_language_reference/05_statement/01_assignment.md:9
msgid "`*=`: multiplication assignment"
msgstr "`*=`：乗算代入"

#: src/05_language_reference/05_statement/01_assignment.md:10
msgid "`/=`: division assignment"
msgstr "`/=`：除算代入"

#: src/05_language_reference/05_statement/01_assignment.md:11
msgid "`%=`: remainder assignment"
msgstr "`%=`：剰余代入"

#: src/05_language_reference/05_statement/01_assignment.md:12
msgid "`&=`: bitwise AND assignment"
msgstr "`&=`：ビットAND代入"

#: src/05_language_reference/05_statement/01_assignment.md:13
msgid "`|=`: bitwise OR assignment"
msgstr "`|=`：ビットOR代入"

#: src/05_language_reference/05_statement/01_assignment.md:14
msgid "`^=`: bitwise XOR assignment"
msgstr "`^=`：ビットXOR代入"

#: src/05_language_reference/05_statement/01_assignment.md:15
msgid "`<<=`: logical left shift assignment"
msgstr "`<<=`：論理左シフト代入"

#: src/05_language_reference/05_statement/01_assignment.md:16
msgid "`>>=`: logical right shift assignment"
msgstr "`>>=`：論理右シフト代入"

#: src/05_language_reference/05_statement/01_assignment.md:17
msgid "`<<<=`: arithmetic left shift assignment"
msgstr "`<<<=`：算術左シフト代入"

#: src/05_language_reference/05_statement/01_assignment.md:18
msgid "`>>>=`: arithmetic right shift assignment"
msgstr "`>>>=`：算術右シフト代入"

#: src/05_language_reference/05_statement/02_function_call.md:3
msgid ""
"Function call can be used as statement. In this case, the return value of "
"function will be ignored."
msgstr ""
"関数呼び出しは文として使うこともできます。この場合、関数の戻り値は無視されま"
"す。"

#: src/05_language_reference/05_statement/03_if.md:3
msgid ""
"`if` can be used as statement. The difference from `if` expression is that "
"statements are placed in `{}`."
msgstr ""
"`if` は文として使うこともできます。`if` 式との違いは `{}` 内に文を書くことで"
"す。"

#: src/05_language_reference/05_statement/04_case.md:3
msgid "`case` can be used as statement. The right-hand of arm is statement."
msgstr "`case` は文として使うこともできます。条件の右側は文になります。"

#: src/05_language_reference/05_statement/05_for.md:3
msgid ""
"`for` statement represent repetition. Loop variable is placed before `in` "
"keyword, and [range](../04_expression/07_range.md) is placed after it."
msgstr ""
"`for` 文は繰り返しを表します。`in` キーワードの前にループ変数を、後に[範囲]"
"(../04_expression/07_range.md)を書きます。"

#: src/05_language_reference/05_statement/05_for.md:7
msgid "`break` can be used to break the loop."
msgstr "`break` を使ってループを中断することもできます。"

#: src/05_language_reference/05_statement/06_return.md:3
msgid ""
"`return` statement represents return from function. The expression after "
"`return` keyword is the return value of the function."
msgstr ""
"`return` 文は関数からの戻りを示します。`return` キーワードの後の式は関数の戻"
"り値です。"

#: src/05_language_reference/05_statement/07_let.md:3
msgid ""
"`let` statement represents a name bound to a value. It can be used in "
"`always_ff`, `always_comb` and function declaration."
msgstr ""
"`let` 文はある名前に値を束縛します。これは `always_ff` 、 `always_comb` およ"
"び関数宣言の中で使うことができます。"

#: src/05_language_reference/05_statement/07_let.md:6
msgid "`let` statement can be placed anywhere in block."
msgstr "`let` 文はブロック中のどこにでも置くことができます。"

#: src/05_language_reference/06_declaration.md:3
msgid "In this chapter, we'll discuss about declaration."
msgstr "この章では宣言について説明します。"

#: src/05_language_reference/06_declaration/01_variable.md:3
msgid ""
"Variable declaration is started by `var` keyword. After `var`, variable "
"name, `:`, and the type of the variable are followed."
msgstr "変数宣言は `var` キーワードで始まり、変数名、`:`、変数の型と続きます。"

#: src/05_language_reference/06_declaration/01_variable.md:6
msgid ""
"If there are unused variables, warning will be occured. Variable name "
"starting with `_` means unused variable, and suppresses the warning."
msgstr ""
"未使用の変数は警告が発生します。`_` で始まる変数名は未使用変数を意味し、警告"
"を抑制します。"

#: src/05_language_reference/06_declaration/01_variable.md:9
msgid ""
"If you want to bind a value to a name at the declaration, `let` can be used "
"instead of `var`."
msgstr "宣言時に名前に値を束縛する場合は `var` の代わりに `let` を使います。"

#: src/05_language_reference/06_declaration/02_parameter.md:3
msgid ""
"Parameter can be declarated as the same as variable. `param` keyword can be "
"used at module header, it can be overridden at instantiation. `local` "
"keyword can be used in module, it can't be overridden."
msgstr ""
"パラメータは変数と同時に宣言できます。`param` キーワードはモジュールヘッダで"
"使用することができ、インスタンス時に上書きできます。`local` キーワードはモ"
"ジュール内で使用することができ、上書きできません。"

#: src/05_language_reference/06_declaration/03_register.md:3
msgid ""
"If a variable is assigned in `always_ff` declaration, it becomes register "
"variable. Register variable will be mapped to flip-flop in synthesis phase."
msgstr ""
"レジスタ変数とは `always_ff` で代入される変数です。合成フェーズでフリップフ"
"ロップにマップされます。"

#: src/05_language_reference/06_declaration/03_register.md:6
msgid ""
"`always_ff` has mandatory clock variable, optional reset variable, and `{}` "
"block. Clock and reset are placed in `()`."
msgstr ""
"`always_ff` は必須のクロック変数、オプションのリセット変数、`{}` ブロックをと"
"ります。クロックとリセットは `()` に書きます。"

#: src/05_language_reference/06_declaration/03_register.md:9
msgid ""
"`if_reset` is a special keyword which can be used in `always_ff`. It means "
"reset condition of the register variable. If `if_reset` is used, `always_ff` "
"must have reset variable. `if_reset` can be conceal reset porality and "
"synchronisity. The actual porality and synchronisity can be configured "
"through `[build]` section of `Veryl.toml`."
msgstr ""
"`if_reset` は `always_ff` に書ける特別なキーワードで、そのレジスタ変数のリ"
"セット条件を示します。`if_reset` を使う場合は `always_ff` のリセット変数は必"
"須です。これを使うことで、リセットの極性と同期性を隠ぺいすることができます。"
"実際の極性と同期性は `Veryl.toml` の `[build]` セクションで設定できます。"

#: src/05_language_reference/06_declaration/04_combinational.md:3
msgid ""
"If a variable is assigned in `always_comb` declaration, it means "
"combinational circuit."
msgstr "`always_comb` で代入される変数は組み合わせ回路を意味します。"

#: src/05_language_reference/06_declaration/05_assign.md:3
msgid "`assign` declaration can assign expression to variable."
msgstr "`assign` 宣言で変数に式を代入することができます。"

#: src/05_language_reference/06_declaration/06_function.md:3
msgid ""
"Function can be declared by `function` keyword. Arguments are placed in `()` "
"and return type is placed after `->`."
msgstr ""
"関数は `function` キーワードで宣言できます。引数は `()` 内に書き、戻り値の型"
"を `->` の後に書きます。"

#: src/05_language_reference/06_declaration/06_function.md:6
msgid "If function doesn't have a return value, `->` can be omitted."
msgstr "関数が戻り値を持たない場合、`->` は省略できます。"

#: src/05_language_reference/06_declaration/07_initial_final.md:3
msgid ""
"Statements in `initial` are executed at the beginning of simulation, `final` "
"is the end. Both will be ignored logical synthesis, and can be used as debug "
"or assertion."
msgstr ""
"`initial` ブロック内の文はシミュレーション開始時に実行され、`final` は終了時"
"です。どちらも論理合成では無視され、デバッグやアサーションに使うことができま"
"す。"

#: src/05_language_reference/06_declaration/07_initial_final.md:7
msgid ""
"```veryl,playground\n"
"module ModuleA {\n"
"    initial {\n"
"        $display(\"initial\");\n"
"    }\n"
"\n"
"    final {\n"
"        $display(\"final\");\n"
"    }\n"
"}\n"
"```"
msgstr ""
"```veryl,playground\n"
"module ModuleA {\n"
"    initial {\n"
"        $display(\"initial\");\n"
"    }\n"
"\n"
"    final {\n"
"        $display(\"final\");\n"
"    }\n"
"}\n"
"```"

#: src/05_language_reference/06_declaration/08_attribute.md:3
msgid "Attribute can annotate some declarations like variable declaration."
msgstr ""
"アトリビュートは変数宣言などいくつかの宣言に注釈を付けることができます。"

#: src/05_language_reference/06_declaration/08_attribute.md:5
msgid "SV Attribute"
msgstr "SV アトリビュート"

#: src/05_language_reference/06_declaration/08_attribute.md:7
msgid ""
"SV attribute represents SystemVerilog attribute. It will be transpiled to "
"SystemVerilog attribute `(*  *)`."
msgstr ""
"SV アトリビュートは SystemVerilog のアトリビュートを表し、`(*  *)` という形式"
"の SystemVerilog アトリビュートに変換されます。"

#: src/05_language_reference/06_declaration/08_attribute.md:10
msgid ""
"```veryl,playground\n"
"module ModuleA {\n"
"    #[sv(\"ram_style=\\\"block\\\"\")]\n"
"    var _a: logic<10>;\n"
"    #[sv(\"mark_debug=\\\"true\\\"\")]\n"
"    var _b: logic<10>;\n"
"}\n"
"```"
msgstr ""
"```veryl,playground\n"
"module ModuleA {\n"
"    #[sv(\"ram_style=\\\"block\\\"\")]\n"
"    var _a: logic<10>;\n"
"    #[sv(\"mark_debug=\\\"true\\\"\")]\n"
"    var _b: logic<10>;\n"
"}\n"
"```"

#: src/05_language_reference/06_declaration/09_generate.md:3
msgid ""
"Declaration can be generated by `for` and `if`. Label which is shown by `:` "
"is required to idenfity the generated declarations."
msgstr ""
"宣言や `for` や `if` を使って生成することができます。`:` で示すラベルは生成さ"
"れた複数の宣言を識別するのに必要です。"

#: src/05_language_reference/06_declaration/09_generate.md:6
msgid ""
"```veryl,playground\n"
"module ModuleA {\n"
"    var a: logic<10>;\n"
"\n"
"    for i in 0..10 :label {\n"
"        if i >: 5 :label {\n"
"            assign a[i] = i + 2;\n"
"        } else { // label of else clause can be omit\n"
"            assign a[i] = i + 2;\n"
"        }\n"
"    }\n"
"}\n"
"```"
msgstr ""
"```veryl,playground\n"
"module ModuleA {\n"
"    var a: logic<10>;\n"
"\n"
"    for i in 0..10 :label {\n"
"        if i >: 5 :label {\n"
"            assign a[i] = i + 2;\n"
"        } else { // else 句のラベルは省略可能\n"
"            assign a[i] = i + 2;\n"
"        }\n"
"    }\n"
"}\n"
"```"

#: src/05_language_reference/06_declaration/10_instantiation.md:3
msgid ""
"`inst` keyword represents instantiation of modula and interface. The name of "
"instance is placed after `inst` keyword, and the type of instance is placed "
"after `:`. Parameter override is `#()`, and port connection is `()`."
msgstr ""
"`inst` キーワードはモジュールやインターフェースのインスタンス化を表します。イ"
"ンスタンスの名前は `inst` の後に、インスタンスの型は `:` の後に書きます。"
"`#()` でパラメータオーバーライドを、`()` でポート接続を表します。"

#: src/05_language_reference/06_declaration/10_instantiation.md:8
msgid ""
"```veryl,playground\n"
"module ModuleA #(\n"
"    param paramA: u32 = 1,\n"
") {\n"
"    var a: logic<10>;\n"
"    var b: logic<10>;\n"
"\n"
"    inst instB: ModuleB #(\n"
"        paramA    , // Parameter assignment by name\n"
"        paramB: 10,\n"
"    ) (\n"
"        a    , // Port connection by name\n"
"        bb: b,\n"
"    );\n"
"}\n"
"```"
msgstr ""
"```veryl,playground\n"
"module ModuleA #(\n"
"    param paramA: u32 = 1,\n"
") {\n"
"    var a: logic<10>;\n"
"    var b: logic<10>;\n"
"\n"
"    inst instB: ModuleB #(\n"
"        paramA    , // 名前によるパラメータ代入\n"
"        paramB: 10,\n"
"    ) (\n"
"        a    , // 名前によるポート接続\n"
"        bb: b,\n"
"    );\n"
"}\n"
"```"

#: src/05_language_reference/06_declaration/11_named_block.md:3
msgid ""
"Label can be added to `{}` block. The named block has an individual "
"namespace."
msgstr ""
"`{}` ブロックにラベルを付けることができます。そのような名前付きブロックは独立"
"した名前空間を持ちます。"

#: src/05_language_reference/07_module.md:3
msgid ""
"Module is one of top level components in source code. Module has overridable "
"parameters, connection ports, and internal logic."
msgstr ""
"モジュールはソースコードの最上位コンポーネントの1つです。モジュールはオーバー"
"ライド可能なパラメータ、接続ポート、内部ロジックを持ちます。"

#: src/05_language_reference/07_module.md:6
msgid ""
"Overridable parameters can be declared in `#()`. Each parameter declaration "
"is started by `param` keyword. After the keyword, an identifier, `:`, the "
"type of the parameter, and a default value are placed."
msgstr ""
"オーバーライド可能なパラメータは `#()` 内で宣言できます。それぞれのパラメータ"
"宣言は `param` キーワードで始まり、識別子、`:`、パラメータの型、デフォルト値"
"で構成されます。"

#: src/05_language_reference/07_module.md:10
msgid ""
"Connection ports can be declared in `()`. Each port declaration is "
"constructed by an identifier, `:`, port direction, and the type of the port. "
"The available port directions are:"
msgstr ""
"接続ポートは `()` 内で宣言できます。それぞれのポート宣言は識別子、`:`、ポート"
"の方向、ポートの型で構成されます。利用可能なポート方向は以下の通りです。"

#: src/05_language_reference/07_module.md:14
msgid "`input`: input port"
msgstr "`input`：入力ポート"

#: src/05_language_reference/07_module.md:15
msgid "`output`: output port"
msgstr "`output`：出力ポート"

#: src/05_language_reference/07_module.md:16
msgid "`inout`: bi-directional port"
msgstr "`inout`：双方向ポート"

#: src/05_language_reference/07_module.md:17
msgid "`modport`: modport of interface"
msgstr "`modport`：インターフェースのmodport"

#: src/05_language_reference/08_interface.md:3
msgid ""
"Interface is one of top level components in source code. Interface has "
"overridable parameters, and interface definitions."
msgstr ""
"インターフェースはソースコードの最上位コンポーネントの1つです。インターフェー"
"スはオーバーライド可能なパラメータ、インターフェース定義を持ちます。"

#: src/05_language_reference/08_interface.md:6
msgid "Overridable parameters are the same as them of module."
msgstr "オーバーライド可能なパラメータについてはモジュールと同じです。"

#: src/05_language_reference/08_interface.md:8
msgid ""
"In interface definitions, `modport` can be declared.  `modport` can be used "
"as bundled port connection at the port declaration of module."
msgstr ""
"インターフェース定義では `modport` を宣言することができます。`modport` はモ"
"ジュールのポート宣言で、ポートを束ねて接続するために使うことができます。"

#: src/05_language_reference/09_package.md:3
msgid ""
"Package is one of top level components in source code. Package can organize "
"some declarations like parameter and function."
msgstr ""
"パッケージはソースコードの最上位コンポーネントの1つです。パッケージはパラメー"
"タや関数などいくつかの宣言をまとめることができます。"

#: src/05_language_reference/09_package.md:6
msgid ""
"To access an item in a package, `::` symbol can be used like `PackageA::"
"ParamA`."
msgstr ""
"パッケージ内の要素にアクセスするには、`::` 記号を使って `PackageA::ParamA` の"
"ようにします。"

#: src/05_language_reference/10_systemverilog_interoperation.md:3
msgid ""
"If you want to access to items of SystemVerilog, `$sv` namespace can be "
"used. For example, \"ModuleA\" in SystemVerilog source code can be accessed "
"by `$sv::ModuleA`. Veryl don't check the existence of the items."
msgstr ""
"SystemVerilogの要素にアクセスする場合は `$sv` 名前空間を使えます。例えば、"
"SystemVerilogソースコードの \"ModuleA\" は `$sv::ModuleA` です。Veryl はこれ"
"らの要素が実際に存在するかどうかは確認しません。"

#: src/05_language_reference/11_visibility.md:3
msgid ""
"By default, all top level items of a project (module, interface and package) "
"are private. The \"private\" means they are not visible from other project."
msgstr ""
"デフォルトではプロジェクトのトップレベルアイテム（モジュール、インターフェー"
"ス、パッケージ）はプライベートです。プライベートとは他のプロジェクトから参照"
"できないことを意味します。"

#: src/05_language_reference/11_visibility.md:6
msgid ""
"`pub` keyword can be used to specify an item as public to other project. "
"`veryl doc` will generate [documents]"
"(../05_development_environment/09_documentation.md) of public items only."
msgstr ""
"`pub` キーワードによって他のプロジェクトから見えるように指定することができま"
"す。`veryl doc` コマンドはパブリックなアイテムの [ドキュメント]"
"(../05_development_environment/09_documentation.md) のみを生成します。"

#: src/06_development_environment.md:3
msgid ""
"In this chapter, we'll discuss about development environment including "
"project configuration and development tools."
msgstr "この章ではプロジェクト設定や開発ツールなど開発環境について説明します。"

#: src/06_development_environment/01_project_configuration.md:3
msgid ""
"[`[project]`](01_project_configuration.md#the-project-section) --- Defines a "
"project."
msgstr ""
"[`[project]`](01_project_configuration.md#the-project-section) --- プロジェク"
"ト定義"

#: src/06_development_environment/01_project_configuration.md:4
msgid ""
"[`name`](01_project_configuration.md#the-name-field) --- The name of the "
"project."
msgstr ""
"[`name`](01_project_configuration.md#the-name-field) --- プロジェクトの名前"

#: src/06_development_environment/01_project_configuration.md:5
msgid ""
"[`version`](01_project_configuration.md#the-version-field) --- The version "
"of the project."
msgstr ""
"[`version`](01_project_configuration.md#the-version-field) --- プロジェクトの"
"バージョン"

#: src/06_development_environment/01_project_configuration.md:6
msgid ""
"[`authors`](01_project_configuration.md#the-authors-field) --- The authors "
"of the project."
msgstr ""
"[`authors`](01_project_configuration.md#the-authors-field) --- プロジェクトの"
"作者"

#: src/06_development_environment/01_project_configuration.md:7
msgid ""
"[`description`](01_project_configuration.md#the-description-field) --- A "
"description of the project."
msgstr ""
"[`description`](01_project_configuration.md#the-description-field) --- プロ"
"ジェクトの説明"

#: src/06_development_environment/01_project_configuration.md:8
msgid ""
"[`license`](01_project_configuration.md#the-license-field) --- The project "
"license."
msgstr ""
"[`license`](01_project_configuration.md#the-license-field) --- プロジェクトの"
"ライセンス"

#: src/06_development_environment/01_project_configuration.md:9
msgid ""
"[`repository`](01_project_configuration.md#the-repository-field) --- URL of "
"the project source repository."
msgstr ""
"[`repository`](01_project_configuration.md#the-repository-field) --- プロジェ"
"クトのリポジトリの URL"

#: src/06_development_environment/01_project_configuration.md:10
msgid ""
"[`[build]`](01_project_configuration.md#the-build-section) --- Build "
"settings."
msgstr ""
"[`[build]`](01_project_configuration.md#the-build-section) --- ビルド設定"

#: src/06_development_environment/01_project_configuration.md:11
msgid ""
"[`clock_type`](01_project_configuration.md#the-clock_type-field) --- The "
"type of clock."
msgstr ""
"[`clock_type`](01_project_configuration.md#the-clock_type-field) --- クロック"
"タイプ"

#: src/06_development_environment/01_project_configuration.md:12
msgid ""
"[`reset_type`](01_project_configuration.md#the-reset_type-field) --- The "
"type of reset."
msgstr ""
"[`reset_type`](01_project_configuration.md#the-reset_type-field) --- リセット"
"タイプ"

#: src/06_development_environment/01_project_configuration.md:13
msgid ""
"[`filelist_type`](01_project_configuration.md#the-filelist_type-field) --- "
"The type of filelist."
msgstr ""
"[`filelist_type`](01_project_configuration.md#the-filelist_type-field) --- "
"ファイルリストのタイプ"

#: src/06_development_environment/01_project_configuration.md:14
msgid ""
"[`target`](01_project_configuration.md#the-target-field) --- The way of "
"output."
msgstr "[`target`](01_project_configuration.md#the-target-field) --- 出力方法"

#: src/06_development_environment/01_project_configuration.md:15
msgid ""
"[`implicit_parameter_types`](01_project_configuration.md#the-"
"implicit_parameter_types-field) --- Whether implicit parameter type is "
"enabled."
msgstr ""
"[`implicit_parameter_types`](01_project_configuration.md#the-"
"implicit_parameter_types-field) --- 暗黙のパラメータ型を有効にするかどうか"

#: src/06_development_environment/01_project_configuration.md:16
msgid ""
"[`omit_project_prefix`](01_project_configuration.md#the-omit_project_prefix-"
"field) --- Whether omit project prefix."
msgstr ""
"[`omit_project_prefix`](01_project_configuration.md#the-omit_project_prefix-"
"field) --- プロジェクト名のプレフィックスを省略するかどうか"

#: src/06_development_environment/01_project_configuration.md:17
msgid ""
"[`strip_comments`](01_project_configuration.md#the-strip_comments-field) --- "
"Whether strip comments."
msgstr ""
"[`strip_comments`](01_project_configuration.md#the-strip_comments-field) --- "
"コメントを削除するかどうか"

#: src/06_development_environment/01_project_configuration.md:18
msgid ""
"[`[format]`](01_project_configuration.md#the-format-section) --- Format "
"settings."
msgstr ""
"[`[format]`](01_project_configuration.md#the-format-section) --- フォーマット"
"設定"

#: src/06_development_environment/01_project_configuration.md:19
msgid ""
"[`[lint]`](01_project_configuration.md#the-lint-section) --- Lint settings."
msgstr ""
"[`[lint]`](01_project_configuration.md#the-lint-section) --- リント設定"

#: src/06_development_environment/01_project_configuration.md:20
msgid ""
"[`[publish]`](01_project_configuration.md#the-publish-section) --- Publish "
"settings."
msgstr ""
"[`[publish]`](01_project_configuration.md#the-publish-section) --- 公開設定"

#: src/06_development_environment/01_project_configuration.md:21
msgid ""
"[`[dependencies]`](01_project_configuration.md#the-dependencies-section) --- "
"Library dependencies."
msgstr ""
"[`[dependencies]`](01_project_configuration.md#the-dependencies-section) --- "
"ライブラリの依存関係"

#: src/06_development_environment/01_project_configuration.md:23
msgid "The `[project]` section"
msgstr "`[project]` セクション"

#: src/06_development_environment/01_project_configuration.md:25
msgid ""
"The first section of `Veryl.toml` is `[project]`. The mandatory fields are "
"`name` and `version`."
msgstr ""
"`Veryl.toml` の最初のセクションは `[project]` です。`name` と `version` は必"
"須です。"

#: src/06_development_environment/01_project_configuration.md:28
msgid "The `name` field"
msgstr "`name` フィールド"

#: src/06_development_environment/01_project_configuration.md:30
msgid ""
"The project name is used as prefix in the generated codes. So the name must "
"start with alphabet or `_`, and use only alphanumeric charaters or `_`."
msgstr ""
"プロジェクト名は生成されるコードのプレフィックスに使われます。そのためプロ"
"ジェクト名はアルファベットか `_` で始まり、英数字と`_` しか使ってはいけませ"
"ん。"

#: src/06_development_environment/01_project_configuration.md:33
msgid "The `version` field"
msgstr "`version` フィールド"

#: src/06_development_environment/01_project_configuration.md:35
msgid ""
"The project version should follow [Semantic Versioning](https://semver."
"org/). The version is constructed by the following three numbers."
msgstr ""
"プロジェクトのバージョンは [セマンティックバージョニング](https://semver."
"org/)に従います。バージョンは以下の3つの数字からなります。"

#: src/06_development_environment/01_project_configuration.md:38
msgid "Major -- increment at incompatible changes"
msgstr "メジャー -- 互換性のない変更時に上げる"

#: src/06_development_environment/01_project_configuration.md:39
msgid "Minor -- increment at adding features with backward compatibility"
msgstr "マイナー -- 互換性のある機能追加時に上げる"

#: src/06_development_environment/01_project_configuration.md:40
msgid "Patch -- increment at bug fixes with backward compatibility"
msgstr "バッチ -- 互換性のあるバグ修正時に上げる"

#: src/06_development_environment/01_project_configuration.md:42
msgid ""
"```toml\n"
"[project]\n"
"version = \"0.1.0\"\n"
"```"
msgstr ""
"```toml\n"
"[project]\n"
"version = \"0.1.0\"\n"
"```"

#: src/06_development_environment/01_project_configuration.md:47
msgid "The `authors` field"
msgstr "`authors` フィールド"

#: src/06_development_environment/01_project_configuration.md:49
msgid ""
"The optional `authors` field lists in an array the people or organizations "
"that are considered the \"authors\" of the project. The format of each "
"string in the list is free. Name only, e-mail address only, and name with e-"
"mail address included within angled brackets are commonly used."
msgstr ""
"オプションの `authors` フィールドにはこのプロジェクトの作者である人や組織を配"
"列にリストアップします。配列内の各文字列のフォーマットは自由です。名前のみ、E"
"メールアドレスのみ、名前と括弧で囲んだEメールアドレスといった形式がよく使われ"
"ます。"

#: src/06_development_environment/01_project_configuration.md:52
msgid ""
"```toml\n"
"[project]\n"
"authors = [\"Fnu Lnu\", \"anonymous@example.com\", \"Fnu Lnu "
"<anonymous@example.com>\"]\n"
"```"
msgstr ""
"```toml\n"
"[project]\n"
"authors = [\"Fnu Lnu\", \"anonymous@example.com\", \"Fnu Lnu "
"<anonymous@example.com>\"]\n"
"```"

#: src/06_development_environment/01_project_configuration.md:57
msgid "The `description` field"
msgstr "`description` フィールド"

#: src/06_development_environment/01_project_configuration.md:59
msgid ""
"The `description` is a short blurb about the project. This should be plane "
"text (not Markdown)."
msgstr ""
"`description` はプロジェクトの短い説明です。マークダウンではなくプレーンテキ"
"スト形式で書きます。"

#: src/06_development_environment/01_project_configuration.md:61
msgid "The `license` field"
msgstr "`license` フィールド"

#: src/06_development_environment/01_project_configuration.md:63
msgid ""
"The `license` field contains the name of license that the project is "
"released under. The string should be follow [SPDX 2.3 license expression]"
"(https://spdx.github.io/spdx-spec/v2.3/SPDX-license-expressions)."
msgstr ""
"`license` フィールドはこのプロジェクトがどのライセンスで公開されているかを指"
"定します。指定する文字列は[SPDX 2.3 license expression](https://spdx.github."
"io/spdx-spec/v2.3/SPDX-license-expressions)に従ってください。"

#: src/06_development_environment/01_project_configuration.md:66
msgid ""
"```toml\n"
"[project]\n"
"license = \"MIT OR Apache-2.0\"\n"
"```"
msgstr ""
"```toml\n"
"[project]\n"
"license = \"MIT OR Apache-2.0\"\n"
"```"

#: src/06_development_environment/01_project_configuration.md:71
msgid "The `repository` field"
msgstr "`repository` フィールド"

#: src/06_development_environment/01_project_configuration.md:73
msgid ""
"The `repository` field should be a URL to the source repository for the "
"project."
msgstr "`repository` フィールドはプロジェクトのソースリポジトリへのURLです。"

#: src/06_development_environment/01_project_configuration.md:75
msgid ""
"```toml\n"
"[project]\n"
"repository = \"https://github.com/veryl-lang/veryl\"\n"
"```"
msgstr ""
"```toml\n"
"[project]\n"
"repository = \"https://github.com/veryl-lang/veryl\"\n"
"```"

#: src/06_development_environment/01_project_configuration.md:80
msgid "The `[build]` section"
msgstr "`[build]` セクション"

#: src/06_development_environment/01_project_configuration.md:82
msgid "The `[build]` section contains the configurations of code generation."
msgstr "`[build]` セクションはコード生成の設定です。"

#: src/06_development_environment/01_project_configuration.md:84
msgid "The `clock_type` field"
msgstr "`clock_type` フィールド"

#: src/06_development_environment/01_project_configuration.md:86
msgid ""
"The `clock_type` field specifies which clock edge is used to drive flip-"
"flop. The available types are below:"
msgstr ""
"`clock_type` フィールドはフリップフロップを駆動するクロックエッジを指定しま"
"す。"

#: src/06_development_environment/01_project_configuration.md:89
msgid "`posedge` -- positive edge"
msgstr "`posedge` -- 立ち上がりエッジ"

#: src/06_development_environment/01_project_configuration.md:90
msgid "`negedge` -- negetive edge"
msgstr "`negedge` -- 立ち下がりエッジ"

#: src/06_development_environment/01_project_configuration.md:92
msgid "The `reset_type` field"
msgstr "`reset_type` フィールド"

#: src/06_development_environment/01_project_configuration.md:94
msgid ""
"The `reset_type` field specifies reset polarity and synchronisity. The "
"available types are below:"
msgstr "`reset_type` フィールドはリセットの極性と同期性を指定します。"

#: src/06_development_environment/01_project_configuration.md:97
msgid "`async_low` -- asynchronous and active low"
msgstr "`async_low` -- 非同期・負極性"

#: src/06_development_environment/01_project_configuration.md:98
msgid "`async_high` -- asynchronous and active high"
msgstr "`async_high` -- 非同期・正極性"

#: src/06_development_environment/01_project_configuration.md:99
msgid "`sync_low` -- synchronous and active low"
msgstr "`sync_low` -- 同期・負極性"

#: src/06_development_environment/01_project_configuration.md:100
msgid "`sync_high` -- synchronous and active high"
msgstr "`sync_high` -- 同期・正極性"

#: src/06_development_environment/01_project_configuration.md:102
msgid "The `filelist_type` field"
msgstr "`filelist_type` フィールド"

#: src/06_development_environment/01_project_configuration.md:104
msgid ""
"The `filelist_type` field specifies filelist format. The available types are "
"below:"
msgstr "`filelist_type` フィールドはファイルリストのフォーマットを指定します。"

#: src/06_development_environment/01_project_configuration.md:107
msgid "`absolute` -- plane text filelist including absolute file paths"
msgstr "`absolute` -- プレーンテキスト形式の絶対パスのリスト"

#: src/06_development_environment/01_project_configuration.md:108
msgid "`relative` -- plane text filelist including relative file paths"
msgstr "`relative` -- プレーンテキスト形式の相対パスのリスト"

#: src/06_development_environment/01_project_configuration.md:109
msgid "`flgen` -- [flgen](https://github.com/pezy-computing/flgen) filelist"
msgstr ""
"`flgen` -- [flgen](https://github.com/pezy-computing/flgen) 形式のファイルリ"
"スト"

#: src/06_development_environment/01_project_configuration.md:111
msgid "The `target` field"
msgstr "`target` フィールド"

#: src/06_development_environment/01_project_configuration.md:113
msgid ""
"The `target` field specifies where the generated codes will be placed at. "
"The available types are below:"
msgstr "`target` フィールドはコードの生成先を指定します。"

#: src/06_development_environment/01_project_configuration.md:116
msgid "`source` -- as the same directory as the source code"
msgstr "`source` -- ソースコードと同じディレクトリ"

#: src/06_development_environment/01_project_configuration.md:117
msgid "`directory` -- specified directory"
msgstr "`directory` -- 特定のディレクトリ"

#: src/06_development_environment/01_project_configuration.md:119
msgid ""
"If you want to use `directory`, you can specify the target directory by "
"`path` key."
msgstr ""
"`directory` を指定する場合は、ターゲットディレクトリを `path` キーで指定しま"
"す。"

#: src/06_development_environment/01_project_configuration.md:121
msgid ""
"```toml\n"
"[build]\n"
"target = {type = \"directory\", path = \"[dst dir]\"}\n"
"```"
msgstr ""
"```toml\n"
"[build]\n"
"target = {type = \"directory\", path = \"[dst dir]\"}\n"
"```"

#: src/06_development_environment/01_project_configuration.md:126
msgid "The `implicit_parameter_types` field"
msgstr "`implicit_parameter_types` フィールド"

#: src/06_development_environment/01_project_configuration.md:128
msgid ""
"The `implicit_parameter_types` field lists the types which will be elided in "
"`parameter` declaration of the generated codes. This is because some EDA "
"tools don't support `parameter` declaration with specific types (ex."
"`string`). If you want to elide `string`, you can specify like below:"
msgstr ""
"`implicit_parameter_types` フィールドは生成コードの `parameter` 宣言で省略す"
"る型をリストアップします。いくつかのEDAツールでは特定の型（例えば `string`）"
"を `parameter` 宣言で使うことができないためです。例えば `string` を指定する場"
"合は以下のようにします。"

#: src/06_development_environment/01_project_configuration.md:132
#: src/06_development_environment/08_compatibility.md:18
msgid ""
"```toml\n"
"[build]\n"
"implicit_parameter_types = [\"string\"]\n"
"```"
msgstr ""
"```toml\n"
"[build]\n"
"implicit_parameter_types = [\"string\"]\n"
"```"

#: src/06_development_environment/01_project_configuration.md:137
msgid "The `omit_project_prefix` field"
msgstr "`omit_project_prefix` フィールド"

#: src/06_development_environment/01_project_configuration.md:139
msgid ""
"If `omit_project_prefix` is set to `true`, the project prefix of module/"
"interface/package name will be omitted. This is `false` by default."
msgstr ""
"`omit_project_prefix` が `true` のとき、モジュール・インターフェース・パッ"
"ケージ名のプロジェクトプレフィックスは省略されます。この値はデフォルトで "
"`false` です。"

#: src/06_development_environment/01_project_configuration.md:147
msgid "The `strip_comments` field"
msgstr "`strip_comments` フィールド"

#: src/06_development_environment/01_project_configuration.md:149
msgid ""
"If `strip_comments` is set to `true`, all comments will be stripped. This is "
"`false` by default."
msgstr ""
"`strip_comments` が `true` のとき、コメント出力は省略されます。この値はデフォ"
"ルトで `false` です。"

#: src/06_development_environment/01_project_configuration.md:157
msgid "The `[format]` section"
msgstr "`[format]` セクション"

#: src/06_development_environment/01_project_configuration.md:159
msgid ""
"The `[format]` section contains the configurations of code formatter. "
"Available configurations is [here](./05_formatter.md)."
msgstr ""
"`[format]` セクションはコードフォーマッターの設定です。詳細は[こちら]"
"(./05_formatter.md)。"

#: src/06_development_environment/01_project_configuration.md:162
msgid "The `[lint]` section"
msgstr "`[lint]` セクション"

#: src/06_development_environment/01_project_configuration.md:164
msgid ""
"The `[lint]` section contains the configurations of linter. Available "
"configurations is [here](./06_linter.md)."
msgstr ""
"`[lint]` セクションはリンタの設定です。詳細は[こちら](./06_linter.md)。"

#: src/06_development_environment/01_project_configuration.md:167
msgid "The `[publish]` section"
msgstr "`[publish]` セクション"

#: src/06_development_environment/01_project_configuration.md:169
msgid ""
"The `[publish]` section contains the configurations of publishing. Available "
"configurations is [here](./03_publish_project.md)."
msgstr ""
"`[publish]` セクションはプロジェクト公開の設定です。詳細は[こちら]"
"(./03_publish_project.md)。"

#: src/06_development_environment/01_project_configuration.md:172
msgid "The `[dependencies]` section"
msgstr "`[dependencies]` セクション"

#: src/06_development_environment/01_project_configuration.md:174
msgid ""
"The `[dependencies]` section contains library dependencies. Available "
"configurations is [here](./02_dependencies.md)."
msgstr ""
"`[dependencies]` セクションはライブラリの依存関係です。詳細は[こちら]"
"(./02_dependencies.md)。"

#: src/06_development_environment/02_dependencies.md:3
msgid ""
"If you want to add other Veryl projects to dependencies of your project, you "
"can add them to `[dependencies]` section in `Veryl.toml`. The left hand side "
"of entry is path to the dependency, and the right hand side is version."
msgstr ""
"他の Veryl プロジェクトへの依存関係をプロジェクトに追加したい場合、`Veryl."
"toml` に `[dependencies]` セクションを追加します。エントリの左辺は依存関係へ"
"のパス、右辺はバージョンです。"

#: src/06_development_environment/02_dependencies.md:11
msgid ""
"By default, the namespace of the dependency is the same as the project name "
"of the dependency. If you want to specify namespace, you can use `name` "
"field."
msgstr ""
"デフォルトでは依存関係の名前空間はそのプロジェクト名と同じです。もし名前空間"
"を指定したい場合は、 `name` フィールドを使います。"

#: src/06_development_environment/02_dependencies.md:14
msgid ""
"```toml\n"
"[dependencies]\n"
"\"https://github.com/veryl-lang/sample\" = {version = \"0.1.0\", name = "
"\"veryl_sample_alt\"}\n"
"```"
msgstr ""
"```toml\n"
"[dependencies]\n"
"\"https://github.com/veryl-lang/sample\" = {version = \"0.1.0\", name = "
"\"veryl_sample_alt\"}\n"
"```"

#: src/06_development_environment/02_dependencies.md:19
msgid ""
"If you want to use many versions of the same dependency path, you can "
"specify each name."
msgstr ""
"同じ依存関係の複数のバージョンを使う場合は、以下のようにそれぞれの名前を指定"
"できます。"

#: src/06_development_environment/02_dependencies.md:21
msgid ""
"```toml\n"
"[dependencies]\n"
"\"https://github.com/veryl-lang/sample\" = [\n"
"    {version = \"0.1.0\", name = \"veryl_sample1\"},\n"
"    {version = \"0.2.0\", name = \"veryl_sample2\"},\n"
"]\n"
"```"
msgstr ""
"```toml\n"
"[dependencies]\n"
"\"https://github.com/veryl-lang/sample\" = [\n"
"    {version = \"0.1.0\", name = \"veryl_sample1\"},\n"
"    {version = \"0.2.0\", name = \"veryl_sample2\"},\n"
"]\n"
"```"

#: src/06_development_environment/02_dependencies.md:29
msgid "Usage of dependency"
msgstr "依存関係の使用"

#: src/06_development_environment/02_dependencies.md:31
msgid ""
"After adding dependencies to `Veryl.toml`, you can use `moudle`, `interface` "
"and `package` in the dependencies. The following example uses `delay` module "
"in the `veryl_sample` dependency."
msgstr ""
"`Veryl.toml` に依存関係を追加したあとは、その依存関係の `module`、"
"`interface`、`package`を使うことができます。以下は `veryl_sample` の依存関係"
"に含まれる `delay` モジュールを使った例です。"

#: src/06_development_environment/02_dependencies.md:50
msgid ""
"Note: The result of play button in the above code is not exact because it "
"doesn't use dependency resolution. Actually the module name becomes "
"`veryl_samlle_delay`"
msgstr ""
"注：上記のコードのプレイボタンの結果は依存関係解決を行わないので正確ではあり"
"ません。実際のモジュール名は `veryl_samlle_delay` になります。"

#: src/06_development_environment/02_dependencies.md:53
msgid "Version Requirement"
msgstr "バージョン要求"

#: src/06_development_environment/02_dependencies.md:55
msgid ""
"The `version` field of `[dependencies]` section shows version requirement. "
"For example, `version = \"0.1.0\"` means the latest version which has "
"compatibility with `0.1.0`. The compatibility is judged by [Semantic "
"Versioning](https://semver.org/). A version is constructed from the "
"following three parts."
msgstr ""
"`[dependencies]` セクションの `version` フィールドはバージョン要求を示しま"
"す。例えば、`version = \"0.1.0\"` は `0.1.0` と互換性のある最新バージョンを意"
"味します。互換性は[セマンティックバージョニング](https://semver.org/)で判定さ"
"れます。バージョンは以下の3つの部分からなります。"

#: src/06_development_environment/02_dependencies.md:60
msgid "`MAJOR` version when you make incompatible API changes"
msgstr "`メジャー` バージョンはAPI非互換な変更"

#: src/06_development_environment/02_dependencies.md:61
msgid ""
"`MINOR` version when you add functionality in a backwards compatible manner"
msgstr "`マイナー` バージョンは互換性のある機能追加"

#: src/06_development_environment/02_dependencies.md:62
msgid "`PATCH` version when you make backwards compatible bug fixes"
msgstr "`パッチ` バージョンは互換性のあるバグ修正"

#: src/06_development_environment/02_dependencies.md:64
msgid ""
"If `MAJOR` version is `0`, `MINOR` is interpreted as incompatible changes."
msgstr ""
"もし `メジャー` バージョンが `0` なら、`マイナー` が非互換変更と解釈されま"
"す。"

#: src/06_development_environment/02_dependencies.md:66
msgid ""
"If there are `0.1.0` and `0.1.1` and `0.2.0`, `0.1.1` will be selected. This "
"is because"
msgstr ""
"バージョン `0.1.0`、`0.1.1`、`0.2.0`があった場合、`0.1.1` が選択されます。こ"
"れは以下のように決定されます。"

#: src/06_development_environment/02_dependencies.md:69
msgid "`0.1.0` is compatible with `0.1.0`."
msgstr "`0.1.0` は `0.1.0` と互換性がある"

#: src/06_development_environment/02_dependencies.md:70
msgid "`0.1.1` is compatible with `0.1.0`."
msgstr "`0.1.1` は `0.1.0` と互換性がある"

#: src/06_development_environment/02_dependencies.md:71
msgid "`0.2.0` is not compatible with `0.1.0`."
msgstr "`0.2.0` は `0.1.0` と互換性がない"

#: src/06_development_environment/02_dependencies.md:72
msgid "`0.1.1` is the latest in the compatible versions."
msgstr "`0.1.1` は互換性のある最新バージョン"

#: src/06_development_environment/02_dependencies.md:74
msgid ""
"The `version` field allows other version requirement reprensentation like "
"`=0.1.0`. Please see version requirement of Rust for detailed information: "
"[Specifying Dependencies](https://doc.rust-lang.org/cargo/reference/"
"specifying-dependencies.html#specifying-dependencies-from-cratesio)."
msgstr ""
"`version` フィールドは `=0.1.0` のような指定も可能です。詳細は Rust のバー"
"ジョン要求についてのドキュメントを参照してください。[Specifying Dependencies]"
"(https://doc.rust-lang.org/cargo/reference/specifying-dependencies."
"html#specifying-dependencies-from-cratesio)."

#: src/06_development_environment/03_publish_project.md:3
msgid ""
"To publish your project, `veryl publish` can be used. Publising means to "
"associate a version with a git revision."
msgstr ""
"プロジェクトを公開するには `veryl publish` コマンドを使います。公開とはバー"
"ジョン番号とgitのリビジョンを紐づけることです。"

#: src/06_development_environment/03_publish_project.md:12
msgid ""
"`veryl publish` generates `Veryl.pub` which contains published version "
"information like below."
msgstr ""
"`veryl publish` は以下のように公開されたバージョンの情報を含んだ `Veryl.pub` "
"というファイルを生成します。"

#: src/06_development_environment/03_publish_project.md:14
msgid ""
"```toml\n"
"[[releases]]\n"
"version = \"0.2.1\"\n"
"revision = \"297bc6b24c5ceca9e648c3ea5e01011c67d7efe7\"\n"
"```"
msgstr ""
"```toml\n"
"[[releases]]\n"
"version = \"0.2.1\"\n"
"revision = \"297bc6b24c5ceca9e648c3ea5e01011c67d7efe7\"\n"
"```"

#: src/06_development_environment/03_publish_project.md:20
msgid ""
"After generating `Veryl.pub`, publishing sequence is completed by git add, "
"commit and push. The git branch to be committed must be the default branch "
"because Veryl search `Veryl.pub` in the default branch."
msgstr ""
"`Veryl.pub` と生成した後、gitのadd、commit、pushを行えば公開手続きは完了で"
"す。gitブランチはデフォルトブランチでなければなりません。これは Veryl が "
"`Veryl.pub` をデフォルトブランチから探すためです。"

#: src/06_development_environment/03_publish_project.md:23
msgid ""
"```\n"
"$ git add Veryl.pub\n"
"$ git commit -m \"Publish\"\n"
"$ git push\n"
"```"
msgstr ""
"```\n"
"$ git add Veryl.pub\n"
"$ git commit -m \"Publish\"\n"
"$ git push\n"
"```"

#: src/06_development_environment/03_publish_project.md:29
msgid ""
"If you enable automatic commit by `publish_commit` in `[publish]` section of "
"`Veryl.toml`, git add and commit will be executed after publish."
msgstr ""
"`Veryl.toml` の `[publish]` セクションに `publish_commit` を設定して自動コ"
"ミットを有効にすれば、gitのaddとcommitが自動で実行されます。"

#: src/06_development_environment/03_publish_project.md:38
msgid "Version Bump"
msgstr "バージョンを上げる"

#: src/06_development_environment/03_publish_project.md:40
msgid ""
"You can bump version with publish at the same time by `--bump` option. As "
"the same as publish, `bump_commit` in `[publish]` section of `Veryl.toml` "
"can specify automatic commit after bump version."
msgstr ""
"`--bump` オプションを使うと公開と同時にバージョンを上げることもできます。公開"
"と同様に、`Veryl.toml` の`[publish]` セクションに `bump_commit` を設定すれば"
"自動でcommitされます。"

#: src/06_development_environment/03_publish_project.md:53
#: src/06_development_environment/03_publish_project.md:61
#: src/06_development_environment/05_formatter.md:14
#: src/06_development_environment/06_linter.md:18
#: src/06_development_environment/07_language_server.md:9
#: src/06_development_environment/09_documentation.md:49
msgid "Configuration"
msgstr "設定"

#: src/06_development_environment/03_publish_project.md:55
msgid ""
"```toml\n"
"[publish]\n"
"bump_commit = true\n"
"bump_commit_message = \"Bump\"\n"
"```"
msgstr ""
"```toml\n"
"[publish]\n"
"bump_commit = true\n"
"bump_commit_message = \"Bump\"\n"
"```"

#: src/06_development_environment/03_publish_project.md:61
#: src/06_development_environment/05_formatter.md:14
#: src/06_development_environment/06_linter.md:18
#: src/06_development_environment/07_language_server.md:9
#: src/06_development_environment/09_documentation.md:49
msgid "Value"
msgstr "設定値"

#: src/06_development_environment/03_publish_project.md:61
#: src/06_development_environment/07_language_server.md:9
#: src/06_development_environment/09_documentation.md:49
msgid "Default"
msgstr "デフォルト"

#: src/06_development_environment/03_publish_project.md:61
#: src/06_development_environment/05_formatter.md:14
#: src/06_development_environment/06_linter.md:18
#: src/06_development_environment/07_language_server.md:9
#: src/06_development_environment/09_documentation.md:49
msgid "Description"
msgstr "説明"

#: src/06_development_environment/03_publish_project.md:63
msgid "bump_commit"
msgstr "bump_commit"

#: src/06_development_environment/03_publish_project.md:63
#: src/06_development_environment/03_publish_project.md:64
#: src/06_development_environment/07_language_server.md:11
msgid "boolean"
msgstr "ブーリアン"

#: src/06_development_environment/03_publish_project.md:63
#: src/06_development_environment/03_publish_project.md:64
#: src/06_development_environment/07_language_server.md:11
msgid "false"
msgstr "false"

#: src/06_development_environment/03_publish_project.md:63
msgid "automatic commit after bump"
msgstr "バージョンアップ後の自動コミット"

#: src/06_development_environment/03_publish_project.md:64
msgid "publish_commit"
msgstr "publish_commit"

#: src/06_development_environment/03_publish_project.md:64
msgid "automatic commit after publish"
msgstr "公開後の自動コミット"

#: src/06_development_environment/03_publish_project.md:65
msgid "bump_commit_mesasge"
msgstr "bump_commit_mesasge"

#: src/06_development_environment/03_publish_project.md:65
#: src/06_development_environment/03_publish_project.md:66
#: src/06_development_environment/06_linter.md:35
#: src/06_development_environment/06_linter.md:36
#: src/06_development_environment/06_linter.md:37
#: src/06_development_environment/06_linter.md:38
#: src/06_development_environment/06_linter.md:39
#: src/06_development_environment/06_linter.md:40
#: src/06_development_environment/06_linter.md:41
#: src/06_development_environment/06_linter.md:42
#: src/06_development_environment/06_linter.md:43
#: src/06_development_environment/06_linter.md:44
#: src/06_development_environment/06_linter.md:45
#: src/06_development_environment/06_linter.md:46
#: src/06_development_environment/06_linter.md:47
#: src/06_development_environment/06_linter.md:48
#: src/06_development_environment/06_linter.md:49
#: src/06_development_environment/09_documentation.md:51
msgid "string"
msgstr "文字列"

#: src/06_development_environment/03_publish_project.md:65
msgid "\"chore: Bump version\""
msgstr "\"chore: Bump version\""

#: src/06_development_environment/03_publish_project.md:65
msgid "commit message after bump"
msgstr "バージョンアップ後のコミットメッセージ"

#: src/06_development_environment/03_publish_project.md:66
msgid "publish_commit_mesasge"
msgstr "publish_commit_mesasge"

#: src/06_development_environment/03_publish_project.md:66
msgid "\"chore: Publish\""
msgstr "\"chore: Publish\""

#: src/06_development_environment/03_publish_project.md:66
msgid "commit message after publish"
msgstr "公開後のコミットメッセージ"

#: src/06_development_environment/04_directory_layout.md:3
msgid ""
"Veryl supports arbitrary directory layout. This is because the optimal "
"directory layout for an independent project and an integrated project within "
"other projects is different."
msgstr ""
"Veryl は任意のディレクトリ構成をサポートしています。これは独立したプロジェク"
"トと他のプロジェクトに組み込まれたプロジェクトでは最適なディレクトリ構成が異"
"なるためです。"

#: src/06_development_environment/04_directory_layout.md:6
msgid "In this section, we suggest some directory layout patterns."
msgstr "この節ではいくつかのディレクトリ構成パターンを示します。"

#: src/06_development_environment/04_directory_layout.md:8
msgid "Single source directory"
msgstr "単一のソースディレクトリ"

#: src/06_development_environment/04_directory_layout.md:10
msgid ""
"This pattern contains all sources in `src` directory. In `src`, you can "
"configure arbitrary sub directories."
msgstr ""
"このパターンでは全てのソースコードは `src` ディレクトリに配置されます。`src` "
"以下のサブディレクトリの構成は自由です。"

#: src/06_development_environment/04_directory_layout.md:26
msgid ""
"Veryl gathers all `*.veryl` files and generates codes at the same directory "
"as the source by default. You can show the behaviour explicitly by the "
"following configuration."
msgstr ""
"Veryl は全ての `*.veryl` ファイルを収集し、デフォルトではソースと同じディレク"
"トリにコードを生成します。この挙動は以下の設定で明示することもできます。"

#: src/06_development_environment/04_directory_layout.md:29
msgid ""
"```toml\n"
"[build]\n"
"target = \"source\"\n"
"```"
msgstr ""
"```toml\n"
"[build]\n"
"target = \"source\"\n"
"```"

#: src/06_development_environment/04_directory_layout.md:34
msgid "After `veryl build`, the directory structure will become below:"
msgstr "`veryl build` を実行するとディレクトリ構成は以下のようになります。"

#: src/06_development_environment/04_directory_layout.md:54
msgid "Single source and target directory"
msgstr "単一のソースとターゲットディレクトリ"

#: src/06_development_environment/04_directory_layout.md:56
msgid ""
"If you want to place the generated codes into a directory, you can use "
"`target` configure in `[build]` section of `Veryl.toml`."
msgstr ""
"生成されたコードを1つのディレクトリに入れたい場合、`Veryl.toml` の `[build]` "
"セクションで `target` を以下のように設定します。"

#: src/06_development_environment/04_directory_layout.md:58
msgid ""
"```toml\n"
"[build]\n"
"target = {type = \"directory\", path = \"target\"}\n"
"```"
msgstr ""
"```toml\n"
"[build]\n"
"target = {type = \"directory\", path = \"target\"}\n"
"```"

#: src/06_development_environment/04_directory_layout.md:63
msgid "The directory layout of this configure will become below:"
msgstr "ディレクトリ構成は以下のようになります。"

#: src/06_development_environment/04_directory_layout.md:84
msgid "Multi source directory"
msgstr "マルチソースディレクトリ"

#: src/06_development_environment/04_directory_layout.md:86
msgid ""
"If you want to add a veryl project to the existing SystemVerilog project, "
"you can choose the following structure."
msgstr ""
"既存の SystemVerilog プロジェクトに Veryl のプロジェクトを組み込む場合、以下"
"のような構成にすることもできます。"

#: src/06_development_environment/04_directory_layout.md:110
msgid ""
"The generated `prj.f` lists all generated files. So you can use it along "
"with the existing SystemVerilog filelists."
msgstr ""
"生成された `prj.f` は生成されたソースコードを全てリストアップしているので、既"
"存の SystemVerilog ファイルリストと一緒に使うことができます。"

#: src/06_development_environment/04_directory_layout.md:112
msgid "About `.gitignore`"
msgstr "`.gitignore` について"

#: src/06_development_environment/04_directory_layout.md:114
msgid ""
"Veryl doesn't provide the default `.gitignore`. This is because which files "
"should be ignored is different by each projects."
msgstr ""
"Veryl はデフォルトの `.gitignore` を提供しません。これはプロジェクト毎にどの"
"ファイルを無視する必要があるかが変わるためです。"

#: src/06_development_environment/04_directory_layout.md:117
msgid "The candidates of `.gitignore` is below:"
msgstr "`.gitignore` の候補としては以下が考えられます。"

#: src/06_development_environment/04_directory_layout.md:119
msgid "`dependencies/`"
msgstr "`dependencies/`"

#: src/06_development_environment/04_directory_layout.md:120
msgid "`target/`"
msgstr "`target/`"

#: src/06_development_environment/04_directory_layout.md:121
msgid "`*.sv`"
msgstr "`*.sv`"

#: src/06_development_environment/04_directory_layout.md:122
msgid "`*.f`"
msgstr "`*.f`"

#: src/06_development_environment/05_formatter.md:3
msgid ""
"Source code can be formatted by `veryl fmt` command. Alternatively, language "
"server support formatting through `textDocument/formatting` request."
msgstr ""
"`veryl fmt` コマンドでソースコードをフォーマットできます。あるいは言語サーバ"
"の `textDocument/formatting` 要求によるフォーマットにも対応しています。"

#: src/06_development_environment/05_formatter.md:6
msgid ""
"The available configurations are below. These can be specified in `[format]` "
"section of `Veryl.toml`."
msgstr ""
"設定可能な項目は以下の通りです。これは `Veryl.toml` の `[format]` セクション"
"で指定できます。"

#: src/06_development_environment/05_formatter.md:16
msgid "indent_width"
msgstr "indent_width"

#: src/06_development_environment/05_formatter.md:16
msgid "integer"
msgstr "整数"

#: src/06_development_environment/05_formatter.md:16
msgid "indent width by space"
msgstr "インデントのスペース幅"

#: src/06_development_environment/06_linter.md:3
msgid ""
"Lint check is executed at `veryl check` or `veryl build`. Alternatively, "
"language server checks lint in real time."
msgstr ""
"`veryl check` あるいは `veryl build` でリントチェックができます。あるいは言語"
"サーバはリアルタイムでのチェックを行います。"

#: src/06_development_environment/06_linter.md:6
msgid ""
"The available configurations are below. These can be specified in `[lint]` "
"section of `Veryl.toml`."
msgstr ""
"設定可能な項目は以下の通りです。これは `Veryl.toml` の `[lint]` セクションで"
"指定できます。"

#: src/06_development_environment/06_linter.md:9
msgid ""
"```toml\n"
"[lint.naming]\n"
"case_enum = \"snake\"\n"
"```"
msgstr ""
"```toml\n"
"[lint.naming]\n"
"case_enum = \"snake\"\n"
"```"

#: src/06_development_environment/06_linter.md:14
msgid "The `[lint.naming]` section"
msgstr "`[lint.naming]` セクション"

#: src/06_development_environment/06_linter.md:16
msgid "This section contains configurations of naming conventions."
msgstr "このセクションは命名規則の設定です。"

#: src/06_development_environment/06_linter.md:20
msgid "case_enum"
msgstr "case_enum"

#: src/06_development_environment/06_linter.md:20
#: src/06_development_environment/06_linter.md:21
#: src/06_development_environment/06_linter.md:22
#: src/06_development_environment/06_linter.md:23
#: src/06_development_environment/06_linter.md:24
#: src/06_development_environment/06_linter.md:25
#: src/06_development_environment/06_linter.md:26
#: src/06_development_environment/06_linter.md:27
#: src/06_development_environment/06_linter.md:28
#: src/06_development_environment/06_linter.md:29
#: src/06_development_environment/06_linter.md:30
#: src/06_development_environment/06_linter.md:31
#: src/06_development_environment/06_linter.md:32
#: src/06_development_environment/06_linter.md:33
#: src/06_development_environment/06_linter.md:34
msgid "case type[^casetype]"
msgstr "ケースタイプ[^casetype]"

#: src/06_development_environment/06_linter.md:20
msgid "case style of `enum`"
msgstr "`enum` のケーススタイル"

#: src/06_development_environment/06_linter.md:21
msgid "case_function"
msgstr "case_function"

#: src/06_development_environment/06_linter.md:21
msgid "case style of `function`"
msgstr "`function` のケーススタイル"

#: src/06_development_environment/06_linter.md:22
msgid "case_instance"
msgstr "case_instance"

#: src/06_development_environment/06_linter.md:22
msgid "case style of instance"
msgstr "インスタンスのケーススタイル"

#: src/06_development_environment/06_linter.md:23
msgid "case_interface"
msgstr "case_interface"

#: src/06_development_environment/06_linter.md:23
msgid "case style of `interface`"
msgstr "`interface` のケーススタイル"

#: src/06_development_environment/06_linter.md:24
msgid "case_modport"
msgstr "case_modport"

#: src/06_development_environment/06_linter.md:24
msgid "case style of `modport`"
msgstr "`modport` のケーススタイル"

#: src/06_development_environment/06_linter.md:25
msgid "case_module"
msgstr "case_module"

#: src/06_development_environment/06_linter.md:25
msgid "case style of `module`"
msgstr "`module` のケーススタイル"

#: src/06_development_environment/06_linter.md:26
msgid "case_package"
msgstr "case_package"

#: src/06_development_environment/06_linter.md:26
msgid "case style of `package`"
msgstr "`package` のケーススタイル"

#: src/06_development_environment/06_linter.md:27
msgid "case_parameter"
msgstr "case_parameter"

#: src/06_development_environment/06_linter.md:27
msgid "case style of `parameter`"
msgstr "`parameter` のケーススタイル"

#: src/06_development_environment/06_linter.md:28
msgid "case_port_inout"
msgstr "case_port_inout"

#: src/06_development_environment/06_linter.md:28
msgid "case style of `inout` port"
msgstr "`inout` ポートのケーススタイル"

#: src/06_development_environment/06_linter.md:29
msgid "case_port_input"
msgstr "case_port_input"

#: src/06_development_environment/06_linter.md:29
msgid "case style of `input` port"
msgstr "`input` ポートのケーススタイル"

#: src/06_development_environment/06_linter.md:30
msgid "case_port_modport"
msgstr "case_port_modport"

#: src/06_development_environment/06_linter.md:30
msgid "case style of `modport` port"
msgstr "`modport` ポートのケーススタイル"

#: src/06_development_environment/06_linter.md:31
msgid "case_port_output"
msgstr "case_port_output"

#: src/06_development_environment/06_linter.md:31
msgid "case style of `output` port"
msgstr "`output` ポートのケーススタイル"

#: src/06_development_environment/06_linter.md:32
msgid "case_reg"
msgstr "case_reg"

#: src/06_development_environment/06_linter.md:32
msgid "case style of register type variable[^reg]"
msgstr "レジスタ変数[^reg]のケーススタイル"

#: src/06_development_environment/06_linter.md:33
msgid "case_struct"
msgstr "case_struct"

#: src/06_development_environment/06_linter.md:33
msgid "case style of `struct`"
msgstr "`struct` のケーススタイル"

#: src/06_development_environment/06_linter.md:34
msgid "case_wire"
msgstr "case_wire"

#: src/06_development_environment/06_linter.md:34
msgid "case style of wire type variable[^wire]"
msgstr "ワイヤ変数[^wire]のケーススタイル"

#: src/06_development_environment/06_linter.md:35
msgid "prefix_enum"
msgstr "prefix_enum"

#: src/06_development_environment/06_linter.md:35
msgid "prefix of `enum`"
msgstr "`enum` のプレフィックス"

#: src/06_development_environment/06_linter.md:36
msgid "prefix_function"
msgstr "prefix_function"

#: src/06_development_environment/06_linter.md:36
msgid "prefix of `function`"
msgstr "`function` のプレフィックス"

#: src/06_development_environment/06_linter.md:37
msgid "prefix_instance"
msgstr "prefix_instance"

#: src/06_development_environment/06_linter.md:37
msgid "prefix of instance"
msgstr "インスタンスのプレフィックス"

#: src/06_development_environment/06_linter.md:38
msgid "prefix_interface"
msgstr "prefix_interface"

#: src/06_development_environment/06_linter.md:38
msgid "prefix of `interface`"
msgstr "`interface` のプレフィックス"

#: src/06_development_environment/06_linter.md:39
msgid "prefix_modport"
msgstr "prefix_modport"

#: src/06_development_environment/06_linter.md:39
msgid "prefix of `modport`"
msgstr "`modport` のプレフィックス"

#: src/06_development_environment/06_linter.md:40
msgid "prefix_module"
msgstr "prefix_module"

#: src/06_development_environment/06_linter.md:40
msgid "prefix of `module`"
msgstr "`module` のプレフィックス"

#: src/06_development_environment/06_linter.md:41
msgid "prefix_package"
msgstr "prefix_package"

#: src/06_development_environment/06_linter.md:41
msgid "prefix of `package`"
msgstr "`package` のプレフィックス"

#: src/06_development_environment/06_linter.md:42
msgid "prefix_parameter"
msgstr "prefix_parameter"

#: src/06_development_environment/06_linter.md:42
msgid "prefix of `parameter`"
msgstr "`parameter` のプレフィックス"

#: src/06_development_environment/06_linter.md:43
msgid "prefix_port_inout"
msgstr "prefix_port_inout"

#: src/06_development_environment/06_linter.md:43
msgid "prefix of `inout` port"
msgstr "`inout` ポートのプレフィックス"

#: src/06_development_environment/06_linter.md:44
msgid "prefix_port_input"
msgstr "prefix_port_input"

#: src/06_development_environment/06_linter.md:44
msgid "prefix of `input` port"
msgstr "`input` ポートのプレフィックス"

#: src/06_development_environment/06_linter.md:45
msgid "prefix_port_modport"
msgstr "prefix_port_modport"

#: src/06_development_environment/06_linter.md:45
msgid "prefix of `modport` port"
msgstr "`modport` ポートのプレフィックス"

#: src/06_development_environment/06_linter.md:46
msgid "prefix_port_output"
msgstr "prefix_port_output"

#: src/06_development_environment/06_linter.md:46
msgid "prefix of `output` port"
msgstr "`output` ポートのプレフィックス"

#: src/06_development_environment/06_linter.md:47
msgid "prefix_reg"
msgstr "prefix_reg"

#: src/06_development_environment/06_linter.md:47
msgid "prefix of register type variable[^reg]"
msgstr "レジスタ変数[^reg]のプレフィックス"

#: src/06_development_environment/06_linter.md:48
msgid "prefix_struct"
msgstr "prefix_struct"

#: src/06_development_environment/06_linter.md:48
msgid "prefix of `struct`"
msgstr "`struct` のプレフィックス"

#: src/06_development_environment/06_linter.md:49
msgid "prefix_wire"
msgstr "prefix_wire"

#: src/06_development_environment/06_linter.md:49
msgid "prefix of wire type variable[^wire]"
msgstr "ワイヤ変数[^wire]のプレフィックス"

#: src/06_development_environment/06_linter.md:50
msgid "re_forbidden_enum"
msgstr "re_forbidden_enum"

#: src/06_development_environment/06_linter.md:50
#: src/06_development_environment/06_linter.md:51
#: src/06_development_environment/06_linter.md:52
#: src/06_development_environment/06_linter.md:53
#: src/06_development_environment/06_linter.md:54
#: src/06_development_environment/06_linter.md:55
#: src/06_development_environment/06_linter.md:56
#: src/06_development_environment/06_linter.md:57
#: src/06_development_environment/06_linter.md:58
#: src/06_development_environment/06_linter.md:59
#: src/06_development_environment/06_linter.md:60
#: src/06_development_environment/06_linter.md:61
#: src/06_development_environment/06_linter.md:62
#: src/06_development_environment/06_linter.md:63
#: src/06_development_environment/06_linter.md:64
#: src/06_development_environment/06_linter.md:65
#: src/06_development_environment/06_linter.md:66
#: src/06_development_environment/06_linter.md:67
#: src/06_development_environment/06_linter.md:68
#: src/06_development_environment/06_linter.md:69
#: src/06_development_environment/06_linter.md:70
#: src/06_development_environment/06_linter.md:71
#: src/06_development_environment/06_linter.md:72
#: src/06_development_environment/06_linter.md:73
#: src/06_development_environment/06_linter.md:74
#: src/06_development_environment/06_linter.md:75
#: src/06_development_environment/06_linter.md:76
#: src/06_development_environment/06_linter.md:77
#: src/06_development_environment/06_linter.md:78
#: src/06_development_environment/06_linter.md:79
msgid "regex[^regex]"
msgstr "正規表現[^regex]"

#: src/06_development_environment/06_linter.md:50
msgid "regex forbidden of `enum`"
msgstr "`enum` の禁止正規表現"

#: src/06_development_environment/06_linter.md:51
msgid "re_forbidden_function"
msgstr "re_forbidden_function"

#: src/06_development_environment/06_linter.md:51
msgid "regex forbidden of `function`"
msgstr "`function` の禁止正規表現"

#: src/06_development_environment/06_linter.md:52
msgid "re_forbidden_instance"
msgstr "re_forbidden_instance"

#: src/06_development_environment/06_linter.md:52
msgid "regex forbidden of instance"
msgstr "インスタンスの禁止正規表現"

#: src/06_development_environment/06_linter.md:53
msgid "re_forbidden_interface"
msgstr "re_forbidden_interface"

#: src/06_development_environment/06_linter.md:53
msgid "regex forbidden of `interface`"
msgstr "`interface` の禁止正規表現"

#: src/06_development_environment/06_linter.md:54
msgid "re_forbidden_modport"
msgstr "re_forbidden_modport"

#: src/06_development_environment/06_linter.md:54
msgid "regex forbidden of `modport`"
msgstr "`modport` の禁止正規表現"

#: src/06_development_environment/06_linter.md:55
msgid "re_forbidden_module"
msgstr "re_forbidden_module"

#: src/06_development_environment/06_linter.md:55
msgid "regex forbidden of `module`"
msgstr "`module` の禁止正規表現"

#: src/06_development_environment/06_linter.md:56
msgid "re_forbidden_package"
msgstr "re_forbidden_package"

#: src/06_development_environment/06_linter.md:56
msgid "regex forbidden of `package`"
msgstr "`package` の禁止正規表現"

#: src/06_development_environment/06_linter.md:57
msgid "re_forbidden_parameter"
msgstr "re_forbidden_parameter"

#: src/06_development_environment/06_linter.md:57
msgid "regex forbidden of `parameter`"
msgstr "`parameter` の禁止正規表現"

#: src/06_development_environment/06_linter.md:58
msgid "re_forbidden_port_inout"
msgstr "re_forbidden_port_inout"

#: src/06_development_environment/06_linter.md:58
msgid "regex forbidden of `inout` port"
msgstr "`inout` ポートの禁止正規表現"

#: src/06_development_environment/06_linter.md:59
msgid "re_forbidden_port_input"
msgstr "re_forbidden_port_input"

#: src/06_development_environment/06_linter.md:59
msgid "regex forbidden of `input` port"
msgstr "`input` ポートの禁止正規表現"

#: src/06_development_environment/06_linter.md:60
msgid "re_forbidden_port_modport"
msgstr "re_forbidden_port_modport"

#: src/06_development_environment/06_linter.md:60
msgid "regex forbidden of `modport` port"
msgstr "`modport` ポートの禁止正規表現"

#: src/06_development_environment/06_linter.md:61
msgid "re_forbidden_port_output"
msgstr "re_forbidden_port_output"

#: src/06_development_environment/06_linter.md:61
msgid "regex forbidden of `output` port"
msgstr "`output` ポートの禁止正規表現"

#: src/06_development_environment/06_linter.md:62
msgid "re_forbidden_reg"
msgstr "re_forbidden_reg"

#: src/06_development_environment/06_linter.md:62
msgid "regex forbidden of register type variable[^reg]"
msgstr "レジスタ変数[^reg]の禁止正規表現"

#: src/06_development_environment/06_linter.md:63
msgid "re_forbidden_struct"
msgstr "re_forbidden_struct"

#: src/06_development_environment/06_linter.md:63
msgid "regex forbidden of `struct`"
msgstr "`struct` の禁止正規表現"

#: src/06_development_environment/06_linter.md:64
msgid "re_forbidden_wire"
msgstr "re_forbidden_wire"

#: src/06_development_environment/06_linter.md:64
msgid "regex forbidden of wire type variable[^wire]"
msgstr "ワイヤ変数[^wire]の禁止正規表現"

#: src/06_development_environment/06_linter.md:65
msgid "re_required_enum"
msgstr "re_required_enum"

#: src/06_development_environment/06_linter.md:65
msgid "regex required of `enum`"
msgstr "`enum` の必須正規表現"

#: src/06_development_environment/06_linter.md:66
msgid "re_required_function"
msgstr "re_required_function"

#: src/06_development_environment/06_linter.md:66
msgid "regex required of `function`"
msgstr "`function` の必須正規表現"

#: src/06_development_environment/06_linter.md:67
msgid "re_required_instance"
msgstr "re_required_instance"

#: src/06_development_environment/06_linter.md:67
msgid "regex required of instance"
msgstr "インスタンスの必須正規表現"

#: src/06_development_environment/06_linter.md:68
msgid "re_required_interface"
msgstr "re_required_interface"

#: src/06_development_environment/06_linter.md:68
msgid "regex required of `interface`"
msgstr "`interface` の必須正規表現"

#: src/06_development_environment/06_linter.md:69
msgid "re_required_modport"
msgstr "re_required_modport"

#: src/06_development_environment/06_linter.md:69
msgid "regex required of `modport`"
msgstr "`modport` の必須正規表現"

#: src/06_development_environment/06_linter.md:70
msgid "re_required_module"
msgstr "re_required_module"

#: src/06_development_environment/06_linter.md:70
msgid "regex required of `module`"
msgstr "`module` の必須正規表現"

#: src/06_development_environment/06_linter.md:71
msgid "re_required_package"
msgstr "re_required_package"

#: src/06_development_environment/06_linter.md:71
msgid "regex required of `package`"
msgstr "`package` の必須正規表現"

#: src/06_development_environment/06_linter.md:72
msgid "re_required_parameter"
msgstr "re_required_parameter"

#: src/06_development_environment/06_linter.md:72
msgid "regex required of `parameter`"
msgstr "`parameter` の必須正規表現"

#: src/06_development_environment/06_linter.md:73
msgid "re_required_port_inout"
msgstr "re_required_port_inout"

#: src/06_development_environment/06_linter.md:73
msgid "regex required of `inout` port"
msgstr "`inout` ポートの必須正規表現"

#: src/06_development_environment/06_linter.md:74
msgid "re_required_port_input"
msgstr "re_required_port_input"

#: src/06_development_environment/06_linter.md:74
msgid "regex required of `input` port"
msgstr "`input` ポートの必須正規表現"

#: src/06_development_environment/06_linter.md:75
msgid "re_required_port_modport"
msgstr "re_required_port_modport"

#: src/06_development_environment/06_linter.md:75
msgid "regex required of `modport` port"
msgstr "`modport` ポートの必須正規表現"

#: src/06_development_environment/06_linter.md:76
msgid "re_required_port_output"
msgstr "re_required_port_output"

#: src/06_development_environment/06_linter.md:76
msgid "regex required of `output` port"
msgstr "`output` ポートの必須正規表現"

#: src/06_development_environment/06_linter.md:77
msgid "re_required_reg"
msgstr "re_required_reg"

#: src/06_development_environment/06_linter.md:77
msgid "regex required of register type variable[^reg]"
msgstr "レジスタ変数[^reg]の必須正規表現"

#: src/06_development_environment/06_linter.md:78
msgid "re_required_struct"
msgstr "re_required_struct"

#: src/06_development_environment/06_linter.md:78
msgid "regex required of `struct`"
msgstr "`struct` の必須正規表現"

#: src/06_development_environment/06_linter.md:79
msgid "re_required_wire"
msgstr "re_required_wire"

#: src/06_development_environment/06_linter.md:79
msgid "regex required of wire type variable[^wire]"
msgstr "ワイヤ変数[^wire]の必須正規表現"

#: src/06_development_environment/06_linter.md:81
msgid "The available values are "
msgstr "設定可能な値は以下です。"

#: src/06_development_environment/06_linter.md:83
msgid "`\"snake\"` -- snake_case"
msgstr "`\"snake\"` -- snake_case"

#: src/06_development_environment/06_linter.md:84
msgid "`\"screaming_snake\"` -- SCREAMING_SNAKE_CASE"
msgstr "`\"screaming_snake\"` -- SCREAMING_SNAKE_CASE"

#: src/06_development_environment/06_linter.md:85
msgid "`\"lower_camel\"` -- lowerCamelCase"
msgstr "`\"lower_camel\"` -- lowerCamelCase"

#: src/06_development_environment/06_linter.md:86
msgid "`\"upper_camel\"` -- UpperCamelCase"
msgstr "`\"upper_camel\"` -- UpperCamelCase"

#: src/06_development_environment/06_linter.md:88
msgid ""
"Regular expression string like `\".*\"`. The available syntax is [here]"
"(https://docs.rs/regex/latest/regex/#syntax)."
msgstr ""
"`\".*\"`のような正規表現です。使用可能な構文は[こちら](https://docs.rs/regex/"
"latest/regex/#syntax)."

#: src/06_development_environment/06_linter.md:90
msgid ""
"Register type means that the variable is assigned in `always_ff`. It will be "
"mapped to flip-flop in synthesis phase."
msgstr ""
"レジスタ変数とは `always_ff` で代入される変数です。合成フェーズでフリップフ"
"ロップにマップされます。"

#: src/06_development_environment/06_linter.md:92
msgid ""
"Wire type means that the variable is assigned in `always_comb`. It will be "
"mapped to wire in synthesis phase."
msgstr ""
"ワイヤ変数とは `always_comb` で代入される変数です。合成フェーズでワイヤにマッ"
"プされます。"

#: src/06_development_environment/07_language_server.md:3
msgid ""
"`veryl-ls` is a language server binary. If you want to use it, editor "
"configuration or plugin to use it is required."
msgstr ""
"`veryl-ls` は言語サーバのバイナリです。使用するにはエディタの設定やプラグイン"
"が必要です。"

#: src/06_development_environment/07_language_server.md:6
msgid ""
"The available configurations are below. These can be specified by each "
"editor's config."
msgstr ""
"設定可能な項目は以下の通りです。これは各エディタの設定から指定できます。"

#: src/06_development_environment/07_language_server.md:11
msgid "useOperatorCompletion"
msgstr "useOperatorCompletion"

#: src/06_development_environment/07_language_server.md:11
msgid "use operator (e.g. '>:', '>>') completion"
msgstr "演算子（例 '>:', '>>'）の補完を有効にする"

#: src/06_development_environment/08_compatibility.md:3
msgid ""
"Some tools supporting SystemVerilog don't support some features. Code "
"generation can be customized by configuration of `Veryl.toml` to support "
"these tools."
msgstr ""
"いくつかのツールはサポートしていない SystemVerilog 構文があります。これをサ"
"ポートするために、 `Veryl.toml` の設定でコード生成をカスタマイズすることがで"
"きます。"

#: src/06_development_environment/08_compatibility.md:6
msgid "Vivado"
msgstr "Vivado"

#: src/06_development_environment/08_compatibility.md:8
msgid "String parameter"
msgstr "文字列パラメータ"

#: src/06_development_environment/08_compatibility.md:10
msgid "Vivado don't support `parameter` which is typed as `string`."
msgstr "Vivadoは `string` 型の `parameter` をサポートしていません。"

#: src/06_development_environment/08_compatibility.md:12
msgid ""
"```verilog\n"
"parameter string a = \"A\";\n"
"```"
msgstr ""
"```verilog\n"
"parameter string a = \"A\";\n"
"```"

#: src/06_development_environment/08_compatibility.md:16
msgid "So you can use `implicit_parameter_types` like below:"
msgstr "その場合は `implicit_parameter_types` を設定してください。"

#: src/06_development_environment/08_compatibility.md:23
msgid "By the configuration, the generated code becomes like below:"
msgstr "設定すると生成コードは以下のようになります。"

#: src/06_development_environment/08_compatibility.md:25
msgid ""
"```verilog\n"
"parameter a = \"A\";\n"
"```"
msgstr ""
"```verilog\n"
"parameter a = \"A\";\n"
"```"

#: src/06_development_environment/09_documentation.md:3
msgid ""
"Documant of project can be generated by `veryl doc` command. All public "
"modules, interfaces and packages will be listed in it. (See [Visibility]"
"(../04_language_reference/11_visibility.md) )"
msgstr ""
"プロジェクトのドキュメントは `veryl doc` コマンドで生成することができます。全"
"てのパブリックなモジュールとインターフェース、パッケージがリストアップされま"
"す。（参照 [可視性](../04_language_reference/11_visibility.md)）"

#: src/06_development_environment/09_documentation.md:6
msgid ""
"If you want to add a detailed description, you can add documentation "
"comment. In the documentation comment, [Markdown](https://www.markdownguide."
"org) syntax can be used."
msgstr ""
"詳細な説明を書きたい場合はドキュメンテーションコメントを追加することもできま"
"す。ドキュメンテーションコメントでは[マークダウン](https://www.markdownguide."
"org)記法を使えます。"

#: src/06_development_environment/09_documentation.md:9
msgid ""
"Waveform description based on [WaveDrom](https://wavedrom.com) is supported "
"too. In a `wavedrom` code block, the syntax of WaveDrom can be written. "
"Please refer [Tutorial](https://wavedrom.com/tutorial.html) for the detailed "
"syntax."
msgstr ""
"[WaveDrom](https://wavedrom.com) による波形記述もサポートされています。"
"`wavedrom` コードブロック内で、WaveDromの構文を記述することができます。構文の"
"詳細は [チュートリアル](https://wavedrom.com/tutorial.html) を参照してくださ"
"い。"

#: src/06_development_environment/09_documentation.md:13
msgid ""
"````veryl,playground\n"
"/// The detailed description of ModuleA\n"
"///\n"
"/// * list item0\n"
"/// * list item1\n"
"///\n"
"/// ```wavedrom\n"
"/// {signal: [\n"
"///   {name: 'clk', wave: 'p.....|...'},\n"
"///   {name: 'dat', wave: 'x.345x|=.x', data: ['head', 'body', 'tail', "
"'data']},\n"
"///   {name: 'req', wave: '0.1..0|1.0'},\n"
"///   {},\n"
"///   {name: 'ack', wave: '1.....|01.'}\n"
"///\n"
"/// ]}\n"
"/// ```\n"
"pub module ModuleA #(\n"
"    /// Data width\n"
"    param ParamA: u32 = 1,\n"
"    local ParamB: u32 = 1,\n"
") (\n"
"    i_clk  : input  logic        , /// Clock\n"
"    i_rst_n: input  logic        , /// Reset\n"
"    i_data : input  logic<ParamA>, /// Data input\n"
"    o_data : output logic<ParamA>, /// Data output\n"
") {}\n"
"````"
msgstr ""
"```veryl,playground\n"
"/// ModuleAの詳細説明\n"
"///\n"
"/// * リスト要素0\n"
"/// * リスト要素1\n"
"///\n"
"/// ```wavedrom\n"
"/// {signal: [\n"
"///   {name: 'clk', wave: 'p.....|...'},\n"
"///   {name: 'dat', wave: 'x.345x|=.x', data: ['head', 'body', 'tail', "
"'data']},\n"
"///   {name: 'req', wave: '0.1..0|1.0'},\n"
"///   {},\n"
"///   {name: 'ack', wave: '1.....|01.'}\n"
"///\n"
"/// ]}\n"
"/// ```\n"
"pub module ModuleA #(\n"
"    /// データ幅\n"
"    param ParamA: u32 = 1,\n"
"    local ParamB: u32 = 1,\n"
") (\n"
"    i_clk  : input  logic        , /// クロック\n"
"    i_rst_n: input  logic        , /// リセット\n"
"    i_data : input  logic<ParamA>, /// データ入力\n"
"    o_data : output logic<ParamA>, /// データ出力\n"
") {}\n"
"```"

#: src/06_development_environment/09_documentation.md:41
msgid ""
"The available configurations are below. These can be specified in `[doc]` "
"section of `Veryl.toml`."
msgstr ""
"設定可能な項目は以下の通りです。これは `Veryl.toml` の `[doc]` セクションで指"
"定できます。"

#: src/06_development_environment/09_documentation.md:44
msgid ""
"```toml\n"
"[doc]\n"
"path = \"document\"\n"
"```"
msgstr ""
"```toml\n"
"[doc]\n"
"path = \"document\"\n"
"```"

#: src/06_development_environment/09_documentation.md:51
msgid "path"
msgstr "path"

#: src/06_development_environment/09_documentation.md:51
msgid "\"doc\""
msgstr "\"doc\""

#: src/06_development_environment/09_documentation.md:51
msgid "path to output directory"
msgstr "出力ディレクトリへのパス"

#: src/06_development_environment/10_github_action.md:3
msgid ""
"The official GitHub action to download a prebuilt binary of Veryl is "
"provided."
msgstr ""
"ビルド済みのVerylバイナリをダウンロードするための公式GitHub actionが提供され"
"ています。"

#: src/06_development_environment/10_github_action.md:5
msgid ""
"[https://github.com/marketplace/actions/setup-veryl](https://github.com/"
"marketplace/actions/setup-veryl)"
msgstr ""
"[https://github.com/marketplace/actions/setup-veryl](https://github.com/"
"marketplace/actions/setup-veryl)"

#: src/06_development_environment/10_github_action.md:7
msgid "The examples of GitHub action script are below:"
msgstr "GitHub actionスクリプトの例は以下の通りです。"

#: src/06_development_environment/10_github_action.md:9
msgid "Format and build check"
msgstr "フォーマットとビルドチェック"

#: src/06_development_environment/10_github_action.md:12
#: src/06_development_environment/10_github_action.md:27
msgid "name"
msgstr "name"

#: src/06_development_environment/10_github_action.md:12
msgid "Check"
msgstr "Check"

#: src/06_development_environment/10_github_action.md:13
#: src/06_development_environment/10_github_action.md:28
msgid "push"
msgstr "push"

#: src/06_development_environment/10_github_action.md:13
msgid "pull_request"
msgstr "pull_request"

#: src/06_development_environment/10_github_action.md:13
#: src/06_development_environment/10_github_action.md:28
msgid "jobs"
msgstr "jobs"

#: src/06_development_environment/10_github_action.md:15
msgid "check"
msgstr "check"

#: src/06_development_environment/10_github_action.md:16
#: src/06_development_environment/10_github_action.md:31
msgid "runs-on"
msgstr "runs-on"

#: src/06_development_environment/10_github_action.md:16
#: src/06_development_environment/10_github_action.md:31
msgid "ubuntu-latest"
msgstr "ubuntu-latest"

#: src/06_development_environment/10_github_action.md:17
#: src/06_development_environment/10_github_action.md:32
msgid "steps"
msgstr "steps"

#: src/06_development_environment/10_github_action.md:18
#: src/06_development_environment/10_github_action.md:19
#: src/06_development_environment/10_github_action.md:33
#: src/06_development_environment/10_github_action.md:34
#: src/06_development_environment/10_github_action.md:36
msgid "uses"
msgstr "uses"

#: src/06_development_environment/10_github_action.md:18
#: src/06_development_environment/10_github_action.md:33
msgid "actions/checkout@v4"
msgstr "actions/checkout@v4"

#: src/06_development_environment/10_github_action.md:19
#: src/06_development_environment/10_github_action.md:34
msgid "veryl-lang/setup-veryl@v1"
msgstr "veryl-lang/setup-veryl@v1"

#: src/06_development_environment/10_github_action.md:20
#: src/06_development_environment/10_github_action.md:21
#: src/06_development_environment/10_github_action.md:35
msgid "run"
msgstr "run"

#: src/06_development_environment/10_github_action.md:20
msgid "veryl fmt --check"
msgstr "veryl fmt --check"

#: src/06_development_environment/10_github_action.md:21
msgid "veryl check"
msgstr "veryl check"

#: src/06_development_environment/10_github_action.md:24
msgid "Publish document through GitHub Pages"
msgstr "GitHub Pagesからドキュメントを公開する"

#: src/06_development_environment/10_github_action.md:27
msgid "Deploy"
msgstr "Deploy"

#: src/06_development_environment/10_github_action.md:30
msgid "deploy"
msgstr "deploy"

#: src/06_development_environment/10_github_action.md:35
msgid "veryl doc"
msgstr "veryl doc"

#: src/06_development_environment/10_github_action.md:36
msgid "peaceiris/actions-gh-pages@v3"
msgstr "peaceiris/actions-gh-pages@v3"

#: src/06_development_environment/10_github_action.md:37
msgid "with"
msgstr "with"

#: src/06_development_environment/10_github_action.md:38
msgid "github_token"
msgstr "github_token"

#: src/06_development_environment/10_github_action.md:38
msgid "${{ secrets.GITHUB_TOKEN }}"
msgstr "${{ secrets.GITHUB_TOKEN }}"

#: src/06_development_environment/10_github_action.md:39
msgid "publish_dir"
msgstr "publish_dir"

#: src/06_development_environment/10_github_action.md:39
msgid "doc"
msgstr "doc"

#: src/07_appendix/01_formal_syntax.md:3
msgid ""
"Veryl's parser is based on parser generator [parol](https://github.com/"
"jsinger67/parol). The following syntex definition of parol is formal syntax."
msgstr ""
"Veryl のパーサはパーサジェネレータ [parol](https://github.com/jsinger67/"
"parol)を使っています。以下の parol の構文定義が正式な構文です。"

#: src/07_appendix/01_formal_syntax.md:6
msgid ""
"```\n"
"\n"
"%start Veryl\n"
"%title \"Veryl grammar\"\n"
"%comment \"Empty grammar generated by `parol`\"\n"
"%user_type VerylToken = crate::veryl_token::VerylToken\n"
"%user_type Token = crate::veryl_token::Token\n"
"\n"
"%%\n"
"\n"
"// "
"----------------------------------------------------------------------------\n"
"// Terminal\n"
"// "
"----------------------------------------------------------------------------\n"
"\n"
"// Longest match should be first\n"
"\n"
"CommentsTerm          : \"(?:(?:(?://.*(?:\\r\\n|\\r|\\n|$))|(?:(?ms)/"
"\\u{2a}.*?\\u{2a}/))\\s*)+\"                     : Token;\n"
"StringLiteralTerm     : \"\\u{0022}(?:\\\\[\\u{0022}\\\\/bfnrt]|u[0-9a-fA-F]"
"{4}|[^\\u{0022}\\\\\\u0000-\\u001F])*\\u{0022}\": Token;\n"
"ExponentTerm          : /[0-9]+(?:_[0-9]+)*\\.[0-9]+(?:_[0-9]+)*[eE][+-]?"
"[0-9]+(?:_[0-9]+)*/                   : Token;\n"
"FixedPointTerm        : /[0-9]+(?:_[0-9]+)*\\.[0-9]+(?:"
"_[0-9]+)*/                                              : Token;\n"
"BasedTerm             : /(?:[0-9]+(?:_[0-9]+)*)?'[bodh][0-9a-fA-FxzXZ]+(?:"
"_[0-9a-fA-FxzXZ]+)*/                : Token;\n"
"AllBitTerm            : /(?:[0-9]+(?:"
"_[0-9]+)*)?'[01xzXZ]/                                                    : "
"Token;\n"
"BaseLessTerm          : /[0-9]+(?:"
"_[0-9]+)*/                                                                  : "
"Token;\n"
"MinusColonTerm        : "
"'-:'                                                                                  : "
"Token;\n"
"MinusGTTerm           : '-"
">'                                                                                  : "
"Token;\n"
"PlusColonTerm         : "
"'+:'                                                                                  : "
"Token;\n"
"AssignmentOperatorTerm: \"\\+=|-=|\\*=|/=|%=|&=|\\|=|\\^=|<<=|>>=|<<<=|>>>="
"\"                                       : Token;\n"
"Operator11Term        : \"\\*\\*"
"\"                                                                                : "
"Token;\n"
"Operator10Term        : \"/|%"
"\"                                                                                 : "
"Token;\n"
"Operator09Term        : \"\\+|-"
"\"                                                                                : "
"Token;\n"
"Operator08Term        : \"<<<|>>>|<<|>>"
"\"                                                                       : "
"Token;\n"
"Operator07Term        : \"<=|>=|<:|>:"
"\"                                                                         : "
"Token;\n"
"Operator06Term        : \"===|==\\?|!==|!=\\?|==|!="
"\"                                                             : Token;\n"
"Operator02Term        : \"&&"
"\"                                                                                  : "
"Token;\n"
"Operator01Term        : \"\\|\\|"
"\"                                                                                : "
"Token;\n"
"Operator05Term        : \"&"
"\"                                                                                   : "
"Token;\n"
"Operator04Term        : \"\\^~|\\^|~\\^"
"\"                                                                          : "
"Token;\n"
"Operator03Term        : \"\\|"
"\"                                                                                  : "
"Token;\n"
"UnaryOperatorTerm     : \"~&|~\\||!|~"
"\"                                                                          : "
"Token;\n"
"ColonColonTerm        : "
"'::'                                                                                  : "
"Token;\n"
"ColonTerm             : "
"':'                                                                                   : "
"Token;\n"
"CommaTerm             : "
"','                                                                                   : "
"Token;\n"
"DollarTerm            : "
"'$'                                                                                   : "
"Token;\n"
"DotDotEquTerm         : '.."
"='                                                                                 : "
"Token;\n"
"DotDotTerm            : "
"'..'                                                                                  : "
"Token;\n"
"DotTerm               : "
"'.'                                                                                   : "
"Token;\n"
"EquTerm               : "
"'='                                                                                   : "
"Token;\n"
"HashTerm              : "
"'#'                                                                                   : "
"Token;\n"
"LAngleTerm            : "
"'<'                                                                                   : "
"Token;\n"
"LBraceTerm            : "
"'{'                                                                                   : "
"Token;\n"
"LBracketTerm          : "
"'['                                                                                   : "
"Token;\n"
"LParenTerm            : "
"'('                                                                                   : "
"Token;\n"
"RAngleTerm            : "
"'>'                                                                                   : "
"Token;\n"
"RBraceTerm            : "
"'}'                                                                                   : "
"Token;\n"
"RBracketTerm          : "
"']'                                                                                   : "
"Token;\n"
"RParenTerm            : "
"')'                                                                                   : "
"Token;\n"
"SemicolonTerm         : "
"';'                                                                                   : "
"Token;\n"
"StarTerm              : "
"'*'                                                                                   : "
"Token;\n"
"AlwaysCombTerm        : /(?-u:\\b)always_comb(?-u:"
"\\b)/                                                         : Token;\n"
"AlwaysFfTerm          : /(?-u:\\b)always_ff(?-u:"
"\\b)/                                                           : Token;\n"
"AssignTerm            : /(?-u:\\b)assign(?-u:"
"\\b)/                                                              : Token;\n"
"AsyncHighTerm         : /(?-u:\\b)async_high(?-u:"
"\\b)/                                                          : Token;\n"
"AsyncLowTerm          : /(?-u:\\b)async_low(?-u:"
"\\b)/                                                           : Token;\n"
"AsTerm                : /(?-u:\\b)as(?-u:"
"\\b)/                                                                  : "
"Token;\n"
"BitTerm               : /(?-u:\\b)bit(?-u:"
"\\b)/                                                                 : "
"Token;\n"
"CaseTerm              : /(?-u:\\b)case(?-u:"
"\\b)/                                                                : "
"Token;\n"
"DefaultTerm           : /(?-u:\\b)default(?-u:"
"\\b)/                                                             : Token;\n"
"ElseTerm              : /(?-u:\\b)else(?-u:"
"\\b)/                                                                : "
"Token;\n"
"EnumTerm              : /(?-u:\\b)enum(?-u:"
"\\b)/                                                                : "
"Token;\n"
"ExportTerm            : /(?-u:\\b)export(?-u:"
"\\b)/                                                              : Token;\n"
"F32Term               : /(?-u:\\b)f32(?-u:"
"\\b)/                                                                 : "
"Token;\n"
"F64Term               : /(?-u:\\b)f64(?-u:"
"\\b)/                                                                 : "
"Token;\n"
"FinalTerm             : /(?-u:\\b)final(?-u:"
"\\b)/                                                               : "
"Token;\n"
"ForTerm               : /(?-u:\\b)for(?-u:"
"\\b)/                                                                 : "
"Token;\n"
"FunctionTerm          : /(?-u:\\b)function(?-u:"
"\\b)/                                                            : Token;\n"
"I32Term               : /(?-u:\\b)i32(?-u:"
"\\b)/                                                                 : "
"Token;\n"
"I64Term               : /(?-u:\\b)i64(?-u:"
"\\b)/                                                                 : "
"Token;\n"
"IfResetTerm           : /(?-u:\\b)if_reset(?-u:"
"\\b)/                                                            : Token;\n"
"IfTerm                : /(?-u:\\b)if(?-u:"
"\\b)/                                                                  : "
"Token;\n"
"ImportTerm            : /(?-u:\\b)import(?-u:"
"\\b)/                                                              : Token;\n"
"InitialTerm           : /(?-u:\\b)initial(?-u:"
"\\b)/                                                             : Token;\n"
"InoutTerm             : /(?-u:\\b)inout(?-u:"
"\\b)/                                                               : "
"Token;\n"
"InputTerm             : /(?-u:\\b)input(?-u:"
"\\b)/                                                               : "
"Token;\n"
"InsideTerm            : /(?-u:\\b)inside(?-u:"
"\\b)/                                                              : Token;\n"
"InstTerm              : /(?-u:\\b)inst(?-u:"
"\\b)/                                                                : "
"Token;\n"
"InterfaceTerm         : /(?-u:\\b)interface(?-u:"
"\\b)/                                                           : Token;\n"
"InTerm                : /(?-u:\\b)in(?-u:"
"\\b)/                                                                  : "
"Token;\n"
"LetTerm               : /(?-u:\\b)let(?-u:"
"\\b)/                                                                 : "
"Token;\n"
"LocalTerm             : /(?-u:\\b)local(?-u:"
"\\b)/                                                               : "
"Token;\n"
"LogicTerm             : /(?-u:\\b)logic(?-u:"
"\\b)/                                                               : "
"Token;\n"
"LsbTerm               : /(?-u:\\b)lsb(?-u:"
"\\b)/                                                                 : "
"Token;\n"
"ModportTerm           : /(?-u:\\b)modport(?-u:"
"\\b)/                                                             : Token;\n"
"ModuleTerm            : /(?-u:\\b)module(?-u:"
"\\b)/                                                              : Token;\n"
"MsbTerm               : /(?-u:\\b)msb(?-u:"
"\\b)/                                                                 : "
"Token;\n"
"NegedgeTerm           : /(?-u:\\b)negedge(?-u:"
"\\b)/                                                             : Token;\n"
"OutputTerm            : /(?-u:\\b)output(?-u:"
"\\b)/                                                              : Token;\n"
"OutsideTerm           : /(?-u:\\b)outside(?-u:"
"\\b)/                                                             : Token;\n"
"PackageTerm           : /(?-u:\\b)package(?-u:"
"\\b)/                                                             : Token;\n"
"ParamTerm             : /(?-u:\\b)param(?-u:"
"\\b)/                                                               : "
"Token;\n"
"PosedgeTerm           : /(?-u:\\b)posedge(?-u:"
"\\b)/                                                             : Token;\n"
"PubTerm               : /(?-u:\\b)pub(?-u:"
"\\b)/                                                                 : "
"Token;\n"
"RefTerm               : /(?-u:\\b)ref(?-u:"
"\\b)/                                                                 : "
"Token;\n"
"RepeatTerm            : /(?-u:\\b)repeat(?-u:"
"\\b)/                                                              : Token;\n"
"ReturnTerm            : /(?-u:\\b)return(?-u:"
"\\b)/                                                              : Token;\n"
"BreakTerm             : /(?-u:\\b)break(?-u:"
"\\b)/                                                               : "
"Token;\n"
"SignedTerm            : /(?-u:\\b)signed(?-u:"
"\\b)/                                                              : Token;\n"
"StepTerm              : /(?-u:\\b)step(?-u:"
"\\b)/                                                                : "
"Token;\n"
"StringTerm            : /(?-u:\\b)string(?-u:"
"\\b)/                                                              : Token;\n"
"StructTerm            : /(?-u:\\b)struct(?-u:"
"\\b)/                                                              : Token;\n"
"SyncHighTerm          : /(?-u:\\b)sync_high(?-u:"
"\\b)/                                                           : Token;\n"
"SyncLowTerm           : /(?-u:\\b)sync_low(?-u:"
"\\b)/                                                            : Token;\n"
"TriTerm               : /(?-u:\\b)tri(?-u:"
"\\b)/                                                                 : "
"Token;\n"
"TypeTerm              : /(?-u:\\b)type(?-u:"
"\\b)/                                                                : "
"Token;\n"
"U32Term               : /(?-u:\\b)u32(?-u:"
"\\b)/                                                                 : "
"Token;\n"
"U64Term               : /(?-u:\\b)u64(?-u:"
"\\b)/                                                                 : "
"Token;\n"
"UnionTerm             : /(?-u:\\b)union(?-u:"
"\\b)/                                                               : "
"Token;\n"
"VarTerm               : /(?-u:\\b)var(?-u:"
"\\b)/                                                                 : "
"Token;\n"
"IdentifierTerm        : /[a-zA-Z_][0-9a-zA-Z_"
"$]*/                                                             : Token;\n"
"\n"
"// "
"----------------------------------------------------------------------------\n"
"// Token\n"
"// "
"----------------------------------------------------------------------------\n"
"\n"
"Comments: [ CommentsTerm ];\n"
"\n"
"StartToken: Comments;\n"
"\n"
"StringLiteralToken: StringLiteralTerm: Token Comments;\n"
"\n"
"ExponentToken  : ExponentTerm  : Token Comments;\n"
"FixedPointToken: FixedPointTerm: Token Comments;\n"
"BasedToken     : BasedTerm     : Token Comments;\n"
"BaseLessToken  : BaseLessTerm  : Token Comments;\n"
"AllBitToken    : AllBitTerm    : Token Comments;\n"
"\n"
"AssignmentOperatorToken: AssignmentOperatorTerm: Token Comments;\n"
"Operator01Token        : Operator01Term        : Token Comments;\n"
"Operator02Token        : Operator02Term        : Token Comments;\n"
"Operator03Token        : Operator03Term        : Token Comments;\n"
"Operator04Token        : Operator04Term        : Token Comments;\n"
"Operator05Token        : Operator05Term        : Token Comments;\n"
"Operator06Token        : Operator06Term        : Token Comments;\n"
"Operator07Token        : Operator07Term        : Token Comments;\n"
"Operator08Token        : Operator08Term        : Token Comments;\n"
"Operator09Token        : Operator09Term        : Token Comments;\n"
"Operator10Token        : Operator10Term        : Token Comments;\n"
"Operator11Token        : Operator11Term        : Token Comments;\n"
"UnaryOperatorToken     : UnaryOperatorTerm     : Token Comments;\n"
"\n"
"ColonToken       : ColonTerm       : Token Comments;\n"
"ColonColonToken  : ColonColonTerm  : Token Comments;\n"
"CommaToken       : CommaTerm       : Token Comments;\n"
"DollarToken      : DollarTerm      : Token Comments;\n"
"DotDotToken      : DotDotTerm      : Token Comments;\n"
"DotDotEquToken   : DotDotEquTerm   : Token Comments;\n"
"DotToken         : DotTerm         : Token Comments;\n"
"EquToken         : EquTerm         : Token Comments;\n"
"HashToken        : HashTerm        : Token Comments;\n"
"LAngleToken      : LAngleTerm      : Token Comments;\n"
"LBraceToken      : LBraceTerm      : Token Comments;\n"
"LBracketToken    : LBracketTerm    : Token Comments;\n"
"LParenToken      : LParenTerm      : Token Comments;\n"
"MinusColonToken  : MinusColonTerm  : Token Comments;\n"
"MinusGTToken     : MinusGTTerm     : Token Comments;\n"
"PlusColonToken   : PlusColonTerm   : Token Comments;\n"
"RAngleToken      : RAngleTerm      : Token Comments;\n"
"RBraceToken      : RBraceTerm      : Token Comments;\n"
"RBracketToken    : RBracketTerm    : Token Comments;\n"
"RParenToken      : RParenTerm      : Token Comments;\n"
"SemicolonToken   : SemicolonTerm   : Token Comments;\n"
"StarToken        : StarTerm        : Token Comments;\n"
"\n"
"AlwaysCombToken: AlwaysCombTerm: Token Comments;\n"
"AlwaysFfToken  : AlwaysFfTerm  : Token Comments;\n"
"AsToken        : AsTerm        : Token Comments;\n"
"AssignToken    : AssignTerm    : Token Comments;\n"
"AsyncHighToken : AsyncHighTerm : Token Comments;\n"
"AsyncLowToken  : AsyncLowTerm  : Token Comments;\n"
"BitToken       : BitTerm       : Token Comments;\n"
"CaseToken      : CaseTerm      : Token Comments;\n"
"DefaultToken   : DefaultTerm   : Token Comments;\n"
"ElseToken      : ElseTerm      : Token Comments;\n"
"EnumToken      : EnumTerm      : Token Comments;\n"
"ExportToken    : ExportTerm    : Token Comments;\n"
"F32Token       : F32Term       : Token Comments;\n"
"F64Token       : F64Term       : Token Comments;\n"
"FinalToken     : FinalTerm     : Token Comments;\n"
"ForToken       : ForTerm       : Token Comments;\n"
"FunctionToken  : FunctionTerm  : Token Comments;\n"
"I32Token       : I32Term       : Token Comments;\n"
"I64Token       : I64Term       : Token Comments;\n"
"IfResetToken   : IfResetTerm   : Token Comments;\n"
"IfToken        : IfTerm        : Token Comments;\n"
"ImportToken    : ImportTerm    : Token Comments;\n"
"InitialToken   : InitialTerm   : Token Comments;\n"
"InoutToken     : InoutTerm     : Token Comments;\n"
"InputToken     : InputTerm     : Token Comments;\n"
"InsideToken    : InsideTerm    : Token Comments;\n"
"InstToken      : InstTerm      : Token Comments;\n"
"InterfaceToken : InterfaceTerm : Token Comments;\n"
"InToken        : InTerm        : Token Comments;\n"
"LetToken       : LetTerm       : Token Comments;\n"
"LocalToken     : LocalTerm     : Token Comments;\n"
"LogicToken     : LogicTerm     : Token Comments;\n"
"LsbToken       : LsbTerm       : Token Comments;\n"
"ModportToken   : ModportTerm   : Token Comments;\n"
"ModuleToken    : ModuleTerm    : Token Comments;\n"
"MsbToken       : MsbTerm       : Token Comments;\n"
"NegedgeToken   : NegedgeTerm   : Token Comments;\n"
"OutputToken    : OutputTerm    : Token Comments;\n"
"OutsideToken   : OutsideTerm   : Token Comments;\n"
"PackageToken   : PackageTerm   : Token Comments;\n"
"ParamToken     : ParamTerm     : Token Comments;\n"
"PosedgeToken   : PosedgeTerm   : Token Comments;\n"
"PubToken       : PubTerm       : Token Comments;\n"
"RefToken       : RefTerm       : Token Comments;\n"
"RepeatToken    : RepeatTerm    : Token Comments;\n"
"ReturnToken    : ReturnTerm    : Token Comments;\n"
"BreakToken     : BreakTerm     : Token Comments;\n"
"SignedToken    : SignedTerm    : Token Comments;\n"
"StepToken      : StepTerm      : Token Comments;\n"
"StringToken    : StringTerm    : Token Comments;\n"
"StructToken    : StructTerm    : Token Comments;\n"
"SyncHighToken  : SyncHighTerm  : Token Comments;\n"
"SyncLowToken   : SyncLowTerm   : Token Comments;\n"
"TriToken       : TriTerm       : Token Comments;\n"
"TypeToken      : TypeTerm      : Token Comments;\n"
"U32Token       : U32Term       : Token Comments;\n"
"U64Token       : U64Term       : Token Comments;\n"
"UnionToken     : UnionTerm     : Token Comments;\n"
"VarToken       : VarTerm       : Token Comments;\n"
"\n"
"IdentifierToken: IdentifierTerm: Token Comments;\n"
"\n"
"// "
"----------------------------------------------------------------------------\n"
"// VerylToken\n"
"// "
"----------------------------------------------------------------------------\n"
"\n"
"// Start\n"
"Start: StartToken: VerylToken;\n"
"\n"
"// StringLiteral\n"
"StringLiteral: StringLiteralToken: VerylToken;\n"
"\n"
"// Number\n"
"Exponent  : ExponentToken  : VerylToken;\n"
"FixedPoint: FixedPointToken: VerylToken;\n"
"Based     : BasedToken     : VerylToken;\n"
"BaseLess  : BaseLessToken  : VerylToken;\n"
"AllBit    : AllBitToken    : VerylToken;\n"
"\n"
"// Operator\n"
"AssignmentOperator: AssignmentOperatorToken: VerylToken;\n"
"Operator01        : Operator01Token        : VerylToken;\n"
"Operator02        : Operator02Token        : VerylToken;\n"
"Operator03        : Operator03Token        : VerylToken;\n"
"Operator04        : Operator04Token        : VerylToken;\n"
"Operator05        : Operator05Token        : VerylToken;\n"
"Operator06        : Operator06Token        : VerylToken;\n"
"Operator07        : Operator07Token        : VerylToken;\n"
"Operator08        : Operator08Token        : VerylToken;\n"
"Operator09        : Operator09Token        : VerylToken;\n"
"Operator10        : Operator10Token        : VerylToken;\n"
"Operator11        : Operator11Token        : VerylToken;\n"
"UnaryOperator     : UnaryOperatorToken     : VerylToken;\n"
"\n"
"// Symbol\n"
"Colon       : ColonToken       : VerylToken;\n"
"ColonColon  : ColonColonToken  : VerylToken;\n"
"Comma       : CommaToken       : VerylToken;\n"
"Dollar      : DollarToken      : VerylToken;\n"
"DotDot      : DotDotToken      : VerylToken;\n"
"DotDotEqu   : DotDotEquToken   : VerylToken;\n"
"Dot         : DotToken         : VerylToken;\n"
"Equ         : EquToken         : VerylToken;\n"
"Hash        : HashToken        : VerylToken;\n"
"LAngle      : LAngleToken      : VerylToken;\n"
"LBrace      : LBraceToken      : VerylToken;\n"
"LBracket    : LBracketToken    : VerylToken;\n"
"LParen      : LParenToken      : VerylToken;\n"
"MinusColon  : MinusColonToken  : VerylToken;\n"
"MinusGT     : MinusGTToken     : VerylToken;\n"
"PlusColon   : PlusColonToken   : VerylToken;\n"
"RAngle      : RAngleToken      : VerylToken;\n"
"RBrace      : RBraceToken      : VerylToken;\n"
"RBracket    : RBracketToken    : VerylToken;\n"
"RParen      : RParenToken      : VerylToken;\n"
"Semicolon   : SemicolonToken   : VerylToken;\n"
"Star        : StarToken        : VerylToken;\n"
"\n"
"// Keyword\n"
"AlwaysComb: AlwaysCombToken: VerylToken;\n"
"AlwaysFf  : AlwaysFfToken  : VerylToken;\n"
"As        : AsToken        : VerylToken;\n"
"Assign    : AssignToken    : VerylToken;\n"
"AsyncHigh : AsyncHighToken : VerylToken;\n"
"AsyncLow  : AsyncLowToken  : VerylToken;\n"
"Bit       : BitToken       : VerylToken;\n"
"Break     : BreakToken     : VerylToken;\n"
"Case      : CaseToken      : VerylToken;\n"
"Defaul    : DefaultToken   : VerylToken; // avoid to conflict with Rust's "
"Default trait\n"
"Else      : ElseToken      : VerylToken;\n"
"Enum      : EnumToken      : VerylToken;\n"
"Export    : ExportToken    : VerylToken;\n"
"F32       : F32Token       : VerylToken;\n"
"F64       : F64Token       : VerylToken;\n"
"Final     : FinalToken     : VerylToken;\n"
"For       : ForToken       : VerylToken;\n"
"Function  : FunctionToken  : VerylToken;\n"
"I32       : I32Token       : VerylToken;\n"
"I64       : I64Token       : VerylToken;\n"
"If        : IfToken        : VerylToken;\n"
"IfReset   : IfResetToken   : VerylToken;\n"
"Import    : ImportToken    : VerylToken;\n"
"In        : InToken        : VerylToken;\n"
"Initial   : InitialToken   : VerylToken;\n"
"Inout     : InoutToken     : VerylToken;\n"
"Input     : InputToken     : VerylToken;\n"
"Inside    : InsideToken    : VerylToken;\n"
"Inst      : InstToken      : VerylToken;\n"
"Interface : InterfaceToken : VerylToken;\n"
"Let       : LetToken       : VerylToken;\n"
"Local     : LocalToken     : VerylToken;\n"
"Logic     : LogicToken     : VerylToken;\n"
"Lsb       : LsbToken       : VerylToken;\n"
"Modport   : ModportToken   : VerylToken;\n"
"Module    : ModuleToken    : VerylToken;\n"
"Msb       : MsbToken       : VerylToken;\n"
"Negedge   : NegedgeToken   : VerylToken;\n"
"Output    : OutputToken    : VerylToken;\n"
"Outside   : OutsideToken   : VerylToken;\n"
"Package   : PackageToken   : VerylToken;\n"
"Param     : ParamToken     : VerylToken;\n"
"Posedge   : PosedgeToken   : VerylToken;\n"
"Pub       : PubToken       : VerylToken;\n"
"Ref       : RefToken       : VerylToken;\n"
"Repeat    : RepeatToken    : VerylToken;\n"
"Return    : ReturnToken    : VerylToken;\n"
"Signed    : SignedToken    : VerylToken;\n"
"Step      : StepToken      : VerylToken;\n"
"Strin     : StringToken    : VerylToken; // avoid to conflict with Rust's "
"String struct\n"
"Struct    : StructToken    : VerylToken;\n"
"SyncHigh  : SyncHighToken  : VerylToken;\n"
"SyncLow   : SyncLowToken   : VerylToken;\n"
"Tri       : TriToken       : VerylToken;\n"
"Type      : TypeToken      : VerylToken;\n"
"U32       : U32Token       : VerylToken;\n"
"U64       : U64Token       : VerylToken;\n"
"Union     : UnionToken     : VerylToken;\n"
"Var       : VarToken       : VerylToken;\n"
"\n"
"// Identifier\n"
"Identifier: IdentifierToken: VerylToken;\n"
"\n"
"// "
"----------------------------------------------------------------------------\n"
"// Number\n"
"// "
"----------------------------------------------------------------------------\n"
"\n"
"Number: IntegralNumber\n"
"      | RealNumber\n"
"      ;\n"
"\n"
"IntegralNumber: Based\n"
"              | BaseLess\n"
"              | AllBit\n"
"              ;\n"
"\n"
"RealNumber: FixedPoint\n"
"          | Exponent\n"
"          ;\n"
"\n"
"// "
"----------------------------------------------------------------------------\n"
"// Complex Identifier\n"
"// "
"----------------------------------------------------------------------------\n"
"\n"
"HierarchicalIdentifier: Identifier { Select } { Dot Identifier "
"{ Select } };\n"
"ScopedIdentifier      : [ Dollar ] Identifier { ColonColon Identifier };\n"
"ExpressionIdentifier  : [ Dollar ] Identifier ( ExpressionIdentifierScoped | "
"ExpressionIdentifierMember );\n"
"\n"
"ExpressionIdentifierScoped: ColonColon Identifier { ColonColon Identifier } "
"{ Select };\n"
"ExpressionIdentifierMember: { Select } { Dot Identifier { Select } };\n"
"\n"
"// "
"----------------------------------------------------------------------------\n"
"// Expression\n"
"// "
"----------------------------------------------------------------------------\n"
"\n"
"Expression  : Expression01 { Operator01 Expression01 };\n"
"Expression01: Expression02 { Operator02 Expression02 };\n"
"Expression02: Expression03 { Operator03 Expression03 };\n"
"Expression03: Expression04 { Operator04 Expression04 };\n"
"Expression04: Expression05 { Operator05 Expression05 };\n"
"Expression05: Expression06 { Operator06 Expression06 };\n"
"Expression06: Expression07 { Operator07 Expression07 };\n"
"Expression07: Expression08 { Operator08 Expression08 };\n"
"Expression08: Expression09 { Operator09 Expression09 };\n"
"Expression09: Expression10 { ( Operator10 | Star ) Expression10 };\n"
"Expression10: Expression11 { Operator11 Expression11 };\n"
"Expression11: Expression12 { As ScopedIdentifier };\n"
"Expression12: { ( UnaryOperator | Operator09 | Operator05 | Operator03 | "
"Operator04 ) } Factor;\n"
"\n"
"Factor: Number\n"
"      | ExpressionIdentifier [ FunctionCall ]\n"
"      | LParen Expression RParen\n"
"      | LBrace ConcatenationList RBrace\n"
"      | IfExpression\n"
"      | CaseExpression\n"
"      | StringLiteral\n"
"      | ( Msb | Lsb )\n"
"      | InsideExpression\n"
"      | OutsideExpression\n"
"      ;\n"
"\n"
"FunctionCall: LParen [ ArgumentList ] RParen;\n"
"\n"
"ArgumentList: ArgumentItem { Comma ArgumentItem } [ Comma ];\n"
"\n"
"ArgumentItem: Expression;\n"
"\n"
"ConcatenationList: ConcatenationItem { Comma ConcatenationItem } [ Comma ];\n"
"\n"
"ConcatenationItem: Expression [ Repeat Expression ];\n"
"\n"
"IfExpression: If Expression LBrace Expression RBrace { Else If Expression "
"LBrace Expression RBrace } Else LBrace Expression RBrace;\n"
"\n"
"CaseExpression: Case Expression LBrace Expression { Comma Expression } Colon "
"Expression Comma { Expression { Comma Expression } Colon Expression Comma } "
"Defaul Colon Expression [ Comma ] RBrace;\n"
"\n"
"TypeExpression: ScalarType\n"
"              | Type LParen Expression RParen\n"
"              ;\n"
"\n"
"InsideExpression: Inside Expression LBrace RangeList RBrace;\n"
"\n"
"OutsideExpression: Outside Expression LBrace RangeList RBrace;\n"
"\n"
"RangeList: RangeItem { Comma RangeItem } [ Comma ];\n"
"\n"
"RangeItem: Range;\n"
"\n"
"// "
"----------------------------------------------------------------------------\n"
"// Select / Width / Array / Range\n"
"// "
"----------------------------------------------------------------------------\n"
"\n"
"Select: LBracket Expression [ SelectOperator Expression ] RBracket;\n"
"\n"
"SelectOperator: Colon\n"
"              | PlusColon\n"
"              | MinusColon\n"
"              | Step\n"
"              ;\n"
"\n"
"Width: LAngle Expression { Comma Expression } RAngle;\n"
"\n"
"Array: LBracket Expression { Comma Expression } RBracket;\n"
"\n"
"Range: Expression [ RangeOperator Expression ];\n"
"\n"
"RangeOperator: DotDot\n"
"             | DotDotEqu\n"
"             ;\n"
"\n"
"// "
"----------------------------------------------------------------------------\n"
"// ScalarType / ArrayType\n"
"// "
"----------------------------------------------------------------------------\n"
"\n"
"FixedType: U32 | U64 | I32 | I64 | F32 | F64 | Strin;\n"
"\n"
"VariableType: ( Logic | Bit | ScopedIdentifier ) [ Width ];\n"
"\n"
"TypeModifier: Tri | Signed;\n"
"\n"
"ScalarType: { TypeModifier } ( VariableType | FixedType );\n"
"\n"
"ArrayType: ScalarType [ Array ];\n"
"\n"
"// "
"----------------------------------------------------------------------------\n"
"// Statement\n"
"// "
"----------------------------------------------------------------------------\n"
"\n"
"Statement: LetStatement\n"
"         | IdentifierStatement\n"
"         | IfStatement\n"
"         | IfResetStatement\n"
"         | ReturnStatement\n"
"         | BreakStatement\n"
"         | ForStatement\n"
"         | CaseStatement\n"
"         ;\n"
"\n"
"LetStatement: Let Identifier Colon ArrayType Equ Expression Semicolon;\n"
"\n"
"IdentifierStatement: ExpressionIdentifier ( FunctionCall | Assignment ) "
"Semicolon;\n"
"\n"
"Assignment: ( Equ | AssignmentOperator ) Expression;\n"
"\n"
"IfStatement: If Expression LBrace { Statement } RBrace { Else If Expression "
"LBrace { Statement } RBrace } [ Else LBrace { Statement } RBrace ];\n"
"\n"
"IfResetStatement: IfReset LBrace { Statement } RBrace { Else If Expression "
"LBrace { Statement } RBrace } [ Else LBrace { Statement } RBrace ];\n"
"\n"
"ReturnStatement: Return Expression Semicolon;\n"
"\n"
"BreakStatement: Break Semicolon;\n"
"\n"
"ForStatement: For Identifier Colon ScalarType In Range [ Step "
"AssignmentOperator Expression ] LBrace { Statement } RBrace;\n"
"\n"
"CaseStatement: Case Expression LBrace { CaseItem } RBrace;\n"
"\n"
"CaseItem: ( Expression { Comma Expression } | Defaul ) Colon ( Statement | "
"LBrace { Statement } RBrace );\n"
"\n"
"// "
"----------------------------------------------------------------------------\n"
"// Attribute\n"
"// "
"----------------------------------------------------------------------------\n"
"\n"
"Attribute: Hash LBracket Identifier [ LParen AttributeList RParen ] "
"RBracket;\n"
"\n"
"AttributeList: AttributeItem { Comma AttributeItem } [ Comma ];\n"
"\n"
"AttributeItem: Identifier\n"
"             | StringLiteral\n"
"             ;\n"
"\n"
"// "
"----------------------------------------------------------------------------\n"
"// Declaration\n"
"// "
"----------------------------------------------------------------------------\n"
"\n"
"LetDeclaration: Let Identifier Colon ArrayType Equ Expression Semicolon;\n"
"\n"
"VarDeclaration: Var Identifier Colon ArrayType Semicolon;\n"
"\n"
"LocalDeclaration: Local Identifier Colon ( ArrayType Equ Expression | Type "
"Equ TypeExpression ) Semicolon;\n"
"\n"
"TypeDefDeclaration: Type Identifier Equ ArrayType Semicolon;\n"
"\n"
"AlwaysFfDeclaration: AlwaysFf LParen AlwaysFfClock [ Comma AlwaysFfReset ] "
"RParen LBrace { Statement } RBrace;\n"
"\n"
"AlwaysFfClock: [ Posedge | Negedge ] HierarchicalIdentifier;\n"
"\n"
"AlwaysFfReset: [ AsyncLow | AsyncHigh | SyncLow | SyncHigh ] "
"HierarchicalIdentifier;\n"
"\n"
"AlwaysCombDeclaration: AlwaysComb LBrace { Statement } RBrace;\n"
"\n"
"AssignDeclaration: Assign HierarchicalIdentifier Equ Expression Semicolon;\n"
"\n"
"ModportDeclaration: Modport Identifier LBrace ModportList RBrace;\n"
"\n"
"ModportList: ModportGroup { Comma ModportGroup } [ Comma ];\n"
"\n"
"ModportGroup: { Attribute } ( LBrace ModportList RBrace | ModportItem );\n"
"\n"
"ModportItem: Identifier Colon Direction;\n"
"\n"
"EnumDeclaration: Enum Identifier Colon ScalarType LBrace EnumList RBrace;\n"
"\n"
"EnumList: EnumGroup { Comma EnumGroup } [ Comma ];\n"
"\n"
"EnumGroup: { Attribute } ( LBrace EnumList RBrace | EnumItem );\n"
"\n"
"EnumItem: Identifier [ Equ Expression ];\n"
"\n"
"StructUnion: Struct | Union;\n"
"\n"
"StructUnionDeclaration: StructUnion Identifier LBrace StructUnionList "
"RBrace;\n"
"\n"
"StructUnionList: StructUnionGroup { Comma StructUnionGroup } [ Comma ];\n"
"\n"
"StructUnionGroup: { Attribute } ( LBrace StructUnionList RBrace | "
"StructUnionItem );\n"
"\n"
"StructUnionItem: Identifier Colon ScalarType;\n"
"\n"
"InitialDeclaration: Initial LBrace { Statement } RBrace;\n"
"\n"
"FinalDeclaration: Final LBrace { Statement } RBrace;\n"
"\n"
"// "
"----------------------------------------------------------------------------\n"
"// InstDeclaration\n"
"// "
"----------------------------------------------------------------------------\n"
"\n"
"InstDeclaration: Inst Identifier Colon ScopedIdentifier [ Array ] "
"[ InstParameter ] [ LParen [ InstPortList ] RParen ] Semicolon;\n"
"\n"
"InstParameter: Hash LParen [ InstParameterList ] RParen;\n"
"\n"
"InstParameterList: InstParameterGroup { Comma InstParameterGroup } "
"[ Comma ];\n"
"\n"
"InstParameterGroup: { Attribute } ( LBrace InstParameterList RBrace | "
"InstParameterItem );\n"
"\n"
"InstParameterItem: Identifier [ Colon Expression ];\n"
"\n"
"InstPortList: InstPortGroup { Comma InstPortGroup } [ Comma ];\n"
"\n"
"InstPortGroup: { Attribute } ( LBrace InstPortList RBrace | InstPortItem );\n"
"\n"
"InstPortItem: Identifier [ Colon Expression ];\n"
"\n"
"// "
"----------------------------------------------------------------------------\n"
"// WithParameter\n"
"// "
"----------------------------------------------------------------------------\n"
"\n"
"WithParameter: Hash LParen [ WithParameterList ] RParen;\n"
"\n"
"WithParameterList: WithParameterGroup { Comma WithParameterGroup } "
"[ Comma ];\n"
"\n"
"WithParameterGroup: { Attribute } ( LBrace WithParameterList RBrace | "
"WithParameterItem );\n"
"\n"
"WithParameterItem: ( Param | Local ) Identifier Colon ( ArrayType Equ "
"Expression | Type Equ TypeExpression );\n"
"\n"
"// "
"----------------------------------------------------------------------------\n"
"// PortDeclaration\n"
"// "
"----------------------------------------------------------------------------\n"
"\n"
"PortDeclaration: LParen [ PortDeclarationList ] RParen;\n"
"\n"
"PortDeclarationList: PortDeclarationGroup { Comma PortDeclarationGroup } "
"[ Comma ];\n"
"\n"
"PortDeclarationGroup: { Attribute } ( LBrace PortDeclarationList RBrace | "
"PortDeclarationItem );\n"
"\n"
"PortDeclarationItem: Identifier Colon ( Direction ArrayType | Interface "
"[ Array ] );\n"
"\n"
"Direction: Input\n"
"         | Output\n"
"         | Inout\n"
"         | Ref\n"
"         | Modport\n"
"         ;\n"
"\n"
"// "
"----------------------------------------------------------------------------\n"
"// Function\n"
"// "
"----------------------------------------------------------------------------\n"
"\n"
"FunctionDeclaration: Function Identifier [ WithParameter ] "
"[ PortDeclaration ] [ MinusGT ScalarType ] LBrace { FunctionItem } RBrace;\n"
"\n"
"FunctionItem: VarDeclaration\n"
"            | Statement\n"
"            ;\n"
"\n"
"// "
"----------------------------------------------------------------------------\n"
"// Import / Export\n"
"// "
"----------------------------------------------------------------------------\n"
"\n"
"ImportDeclaration: Import ScopedIdentifier [ ColonColon Star ] Semicolon;\n"
"\n"
"ExportDeclaration: Export ( Star | ScopedIdentifier [ ColonColon Star ] ) "
"Semicolon;\n"
"\n"
"// "
"----------------------------------------------------------------------------\n"
"// Module\n"
"// "
"----------------------------------------------------------------------------\n"
"\n"
"ModuleDeclaration: [ Pub ] Module Identifier [ WithParameter ] "
"[ PortDeclaration ] LBrace { ModuleGroup } RBrace;\n"
"\n"
"ModuleIfDeclaration: If Expression ModuleNamedBlock { Else If Expression "
"ModuleOptionalNamedBlock } [ Else ModuleOptionalNamedBlock ];\n"
"\n"
"ModuleForDeclaration: For Identifier In Range [ Step AssignmentOperator "
"Expression ] ModuleNamedBlock;\n"
"\n"
"ModuleNamedBlock: Colon Identifier LBrace { ModuleGroup } RBrace;\n"
"\n"
"ModuleOptionalNamedBlock: [ Colon Identifier ] LBrace { ModuleGroup } "
"RBrace;\n"
"\n"
"ModuleGroup: { Attribute } ( LBrace { ModuleGroup } RBrace | ModuleItem );\n"
"\n"
"ModuleItem: LetDeclaration\n"
"          | VarDeclaration\n"
"          | InstDeclaration\n"
"          | TypeDefDeclaration\n"
"          | LocalDeclaration\n"
"          | AlwaysFfDeclaration\n"
"          | AlwaysCombDeclaration\n"
"          | AssignDeclaration\n"
"          | FunctionDeclaration\n"
"          | ModuleIfDeclaration\n"
"          | ModuleForDeclaration\n"
"          | EnumDeclaration\n"
"          | StructUnionDeclaration\n"
"          | ModuleNamedBlock\n"
"          | ImportDeclaration\n"
"          | InitialDeclaration\n"
"          | FinalDeclaration\n"
"          ;\n"
"\n"
"// "
"----------------------------------------------------------------------------\n"
"// Interface\n"
"// "
"----------------------------------------------------------------------------\n"
"\n"
"InterfaceDeclaration: [ Pub ] Interface Identifier [ WithParameter ] LBrace "
"{ InterfaceGroup } RBrace;\n"
"\n"
"InterfaceIfDeclaration: If Expression InterfaceNamedBlock { Else If "
"Expression InterfaceOptionalNamedBlock } [ Else "
"InterfaceOptionalNamedBlock ];\n"
"\n"
"InterfaceForDeclaration: For Identifier In Range [ Step AssignmentOperator "
"Expression ] InterfaceNamedBlock;\n"
"\n"
"InterfaceNamedBlock: Colon Identifier LBrace { InterfaceGroup } RBrace;\n"
"\n"
"InterfaceOptionalNamedBlock: [ Colon Identifier ] LBrace { InterfaceGroup } "
"RBrace;\n"
"\n"
"InterfaceGroup: { Attribute } ( LBrace { InterfaceGroup } RBrace | "
"InterfaceItem );\n"
"\n"
"InterfaceItem: LetDeclaration\n"
"             | VarDeclaration\n"
"             | LocalDeclaration\n"
"             | ModportDeclaration\n"
"             | InterfaceIfDeclaration\n"
"             | InterfaceForDeclaration\n"
"             | EnumDeclaration\n"
"             | StructUnionDeclaration\n"
"             | InterfaceNamedBlock\n"
"             | FunctionDeclaration\n"
"             | ImportDeclaration\n"
"             | InitialDeclaration\n"
"             | FinalDeclaration\n"
"             ;\n"
"\n"
"// "
"----------------------------------------------------------------------------\n"
"// Package\n"
"// "
"----------------------------------------------------------------------------\n"
"\n"
"PackageDeclaration: [ Pub ] Package Identifier LBrace { PackageGroup } "
"RBrace;\n"
"\n"
"PackageGroup: { Attribute } ( LBrace { PackageGroup } RBrace | "
"PackageItem );\n"
"\n"
"PackageItem: VarDeclaration\n"
"           | LocalDeclaration\n"
"           | TypeDefDeclaration\n"
"           | EnumDeclaration\n"
"           | StructUnionDeclaration\n"
"           | FunctionDeclaration\n"
"           | ImportDeclaration\n"
"           | ExportDeclaration\n"
"           | InitialDeclaration\n"
"           | FinalDeclaration\n"
"           ;\n"
"\n"
"// "
"----------------------------------------------------------------------------\n"
"// Description\n"
"// "
"----------------------------------------------------------------------------\n"
"\n"
"DescriptionGroup: { Attribute } ( LBrace { DescriptionGroup } RBrace | "
"DescriptionItem );\n"
"\n"
"DescriptionItem: ModuleDeclaration\n"
"               | InterfaceDeclaration\n"
"               | PackageDeclaration\n"
"               | ImportDeclaration\n"
"               ;\n"
"\n"
"// "
"----------------------------------------------------------------------------\n"
"// SourceCode\n"
"// "
"----------------------------------------------------------------------------\n"
"\n"
"Veryl: Start { DescriptionGroup };\n"
"```"
msgstr ""

#: src/07_appendix/02_semantic_error.md:3
msgid "duplicated_identifier"
msgstr "duplicated_identifier"

#: src/07_appendix/02_semantic_error.md:5
msgid "invalid_allow"
msgstr "invalid_allow"

#: src/07_appendix/02_semantic_error.md:7
msgid "invalid_direction"
msgstr "invalid_direction"

#: src/07_appendix/02_semantic_error.md:9
msgid "invalid_identifier"
msgstr "invalid_identifier"

#: src/07_appendix/02_semantic_error.md:11
msgid "invalid_lsb"
msgstr "invalid_lsb"

#: src/07_appendix/02_semantic_error.md:13
msgid "invalid_msb"
msgstr "invalid_msb"

#: src/07_appendix/02_semantic_error.md:15
msgid "invalid_number_character"
msgstr "invalid_number_character"

#: src/07_appendix/02_semantic_error.md:17
msgid "invalid_statement"
msgstr "invalid_statement"

#: src/07_appendix/02_semantic_error.md:19
msgid "invalid_system_function"
msgstr "invalid_system_function"

#: src/07_appendix/02_semantic_error.md:21
msgid "mismatch_arity"
msgstr "mismatch_arity"

#: src/07_appendix/02_semantic_error.md:23
msgid "mismatch_attribute_args"
msgstr "mismatch_attribute_args"

#: src/07_appendix/02_semantic_error.md:25
msgid "mismatch_type"
msgstr "mismatch_type"

#: src/07_appendix/02_semantic_error.md:27
msgid "missing_if_reset"
msgstr "missing_if_reset"

#: src/07_appendix/02_semantic_error.md:29
msgid "missing_port"
msgstr "missing_port"

#: src/07_appendix/02_semantic_error.md:31
msgid "missing_reset_signal"
msgstr "missing_reset_signal"

#: src/07_appendix/02_semantic_error.md:33
msgid "missing_reset_statement"
msgstr "missing_reset_statement"

#: src/07_appendix/02_semantic_error.md:35
msgid "too_large_enum_variant"
msgstr "too_large_enum_variant"

#: src/07_appendix/02_semantic_error.md:37
msgid "too_large_number"
msgstr "too_large_number"

#: src/07_appendix/02_semantic_error.md:39
msgid "too_much_enum_variant"
msgstr "too_much_enum_variant"

#: src/07_appendix/02_semantic_error.md:41
msgid "undefined_identifier"
msgstr "undefined_identifier"

#: src/07_appendix/02_semantic_error.md:43
msgid "unknown_attribute"
msgstr "unknown_attribute"

#: src/07_appendix/02_semantic_error.md:45
msgid "unknown_member"
msgstr "unknown_member"

#: src/07_appendix/02_semantic_error.md:47
msgid "unknown_msb"
msgstr "unknown_msb"

#: src/07_appendix/02_semantic_error.md:49
msgid "unknown_port"
msgstr "unknown_port"

#: src/07_appendix/02_semantic_error.md:51
msgid "unused_variable"
msgstr "unused_variable"

#~ msgid ""
#~ "Veryl has symplified syntax based on SystemVerilog / Rust. \"Symplified\" "
#~ "has two meanings. One is for parser, and another is for human."
#~ msgstr ""
#~ "Veryl の構文は SystemVerilog と Rust をベースに簡素化したものです。ここで "
#~ "\"簡素\" とは2つの意味があります。1つはパーサにとって、もう1つは人間にとっ"
#~ "てです。"

#~ msgid ""
#~ "SystemVerilog has very complicated syntax (see IEEE Std 1800-2017 Annex "
#~ "A). This causes difficulty of SystemVerilog tool implementation. Veryl "
#~ "keeps simple syntax to make tool implementation easier. So explicit "
#~ "syntax with keyword and symbol is adopted instead of context dependent "
#~ "syntax and shorthand notation. For example, \"off-side rule\" like "
#~ "Python, \"automatic semicolon insertion\" like ECMAScript / Go will not "
#~ "be supported."
#~ msgstr ""
#~ "SystemVerilog の構文は非常に複雑であり（IEEE Std 1800-2017 Annex A を参"
#~ "照）、このことがツール実装を困難にしています。Veryl はパースしやすい簡素な"
#~ "構文を採用することで、ツール実装のしやすさを重視しています。そのため文脈依"
#~ "存の構文や省略記法よりキーワードや記号による明示的な構文を採用します。例え"
#~ "ば Python における \"オフサイドルール\" や ECMAScript / Go における \"自動"
#~ "セミコロン挿入\"は採用されません。"

#~ msgid ""
#~ "SystemVerilog has various syntax. Some syntaxes are inherited from "
#~ "Verilog, and some syntaxes are added from SystemVerilog. Additionally "
#~ "some syntaxes can be written, but cannot be used actually because major "
#~ "EDA tools don't support them. So user should learn many syntaxes and "
#~ "whether each syntax can be used or not. Veryl will not support old "
#~ "Verilog style, unrecommended description, and so on."
#~ msgstr ""
#~ "SystemVerilog には Verilog から引き継いだ構文や SystemVerilog で新たに追加"
#~ "された構文など多様な構文があります。さらに、いくつかの構文は書くことができ"
#~ "るものの、主要なEDAツールでサポートされていないため事実上使用できません。"
#~ "そのためユーザはそれぞれの構文が使用可能かどうかを学ぶ必要があります。"
#~ "Veryl は古い Verilog スタイルの構文や非推奨記述をサポートしません。"

#~ msgid "Transpiler to SystemVerilog"
#~ msgstr "SystemVerilog へのトランスパイラ"

#~ msgid ""
#~ "HDL alternative languages should be transpiler to the tradisional HDLs "
#~ "like Verilog / VHDL because major EDA tools support them. Veryl is a "
#~ "transpiler to SystemVerilog."
#~ msgstr ""
#~ "HDL の代替言語は主要な EDA ツールがサポートしている Verylog / VHDL のよう"
#~ "な伝統的な HDL へのトランスパイラである必要があります。Veryl は "
#~ "SystemVerilog へのトランスパイラです。"

#~ msgid ""
#~ "Transpiler to Verilog has wide EDA tool support including OSS EDA tools. "
#~ "But even if there are rich data strucuture like `struct` / `interface` in "
#~ "HDL alternatives, transpiled Verilog can't have it. If HDL alternatives "
#~ "have rich code generateion mechanism, transpiled Verilog will be expanded "
#~ "to the very long code. For these reason, debugging the transpiled code "
#~ "becomes difficult."
#~ msgstr ""
#~ "Verilog へのトランスパイラであれば OSS の EDA ツールを含め多くの EDA ツー"
#~ "ルにサポートされています。しかし代替 HDL 上で `struct` や `interface` のよ"
#~ "うなリッチなデータ構造を表現しても、トランスパイルされた Verilog ではそれ"
#~ "らを表現できません。代替 HDL が高度なコード生成機構を持っていても、 "
#~ "Verilog ではそれらが展開された非常に長いコードになってしまいます。そのため"
#~ "トランスパイルされたコードのデバッグは困難です。"

#~ msgid ""
#~ "Veryl will has almost all the same semantics as SystemVerilog. So "
#~ "transpiled code will be human readable SystemVerilog."
#~ msgstr ""
#~ "Veryl は SystemVerilog とほとんど同じセマンティクスを持っています。そのた"
#~ "めトランスパイルされたコードは人間が読みやすい SystemVerilog になります。"

#~ msgid ""
#~ "Additionally Veryl have interoperability with SystemVerilog. Veryl can "
#~ "use SystemVerilog's module / interface / struct / enum in the code, and "
#~ "vice versa."
#~ msgstr ""
#~ "さらに Veryl は SystemVerilog と相互運用可能です。Veryl では "
#~ "SystemVerilog の module / interface / struct / enum を使えますし、逆も可能"
#~ "です。"

#~ msgid "Integrated Tools"
#~ msgstr "ツール統合"

#~ msgid ""
#~ "Modern programming languages have development support tools like linter, "
#~ "formatter, and language server by default. Veryl will have them too from "
#~ "the beginning of development."
#~ msgstr ""
#~ "モダンなプログラミング言語ではリンタやフォーマッタ、言語サーバといったサ"
#~ "ポートツールが標準で揃っています。Veryl でもそれらを最初からサポートしま"
#~ "す。"

#~ msgid "The following tools are supported."
#~ msgstr "以下のツールがサポートされています。"

#~ msgid "Language server"
#~ msgstr "言語サーバ"

#~ msgid "Package manager"
#~ msgstr "パッケージマネージャ"
